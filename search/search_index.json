{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the Flipper Community Wiki","text":"<p>This site contains the unofficial community driven knowledge base for the Flipper Zero. </p> <p>Ready to continue onwards?</p> <ul> <li>Check out the Getting Started guide!</li> <li>Read through the Frequently Asked Questions!</li> </ul> <p>Looking to contribute?</p> <p>See our Contributing page!</p> <p>Note: The content of this wiki is created and maintained by the community and does not represent the official views, statements, or endorsements of Flipper Devices. All Flipper artwork is attributed to Flipper Devices unless otherwise stated. see the about page for more info</p>"},{"location":"125khz-rfid-overview/","title":"Overview","text":"<p>The Flipper Zero supports reading a limited number of 125 kHz RFID protocols. The official Flipper Zero docs detail what protocols are supported. </p>"},{"location":"125khz-rfid-overview/#low-frequency-rfid","title":"Low Frequency (RFID)","text":"<ul> <li> <p>Don't expect to edit/rewrite low frequency credentials.  They are generally read only, passworded, or a type of tag the flipper zero doesn't work with.  To create a copy of a low frequency credential you have, you will need to purchase T5577 credentials. these are chips that can pretend to be other chips. </p> <ul> <li> <p>\"I was able to write the ID on it but when i try another file it says error\"</p> <p>You aren't writing anything. Writing the content that was already on the chip, to the chip, makes the flipper thinks it was successful in it's write when it performs a read to validate the <code>new</code> ID is on the chip, which it is because it was already there. </p> <p>When purchasing T5577s, try to buy from listings that only mention T5577, if you buy from a listing that says T5577/EM4305 you may receive EM4305s and those cant be written to by the flipper.</p> </li> </ul> </li> </ul>"},{"location":"125khz-rfid-overview/#kyber-crystals","title":"Kyber crystals","text":"<p>These are EM4305, but show up looking like EM4100 because EM4305 are emulator chips and they've been pre-configured with the kyber crystal ID.  You can't fully emulate or clone them, emulation is known to work with the holocron but not with the sabers themselves. You cant clone these to T5577s like most other LF RFID chips due to the sabers checking the EM4305 memory pages with specific commands the T5577 doesnt comply with. The flipper does not (currently) support writing to EM4305s, it is currently thought to be impossible with the flipper's hardware but the impossible has been overcome before so who knows if we will see it in the future. </p>"},{"location":"125khz-rfid-overview/#hidiclass","title":"HID/Iclass","text":"<ul> <li>Technically 13.56mhz like NFC, but many people see \"HID\" and think LF RFID</li> <li>Standard and some Elite keyed iClass fobs/cards can be read with Picopass app.</li> <li>Standard keyed iClass SE can be read with Seader + some hardware.</li> </ul>"},{"location":"125khz-rfid-overview/#anything-elseunknown-tags","title":"Anything else/unknown tags","text":"<ul> <li>If its not scanning and doesnt have any visible branding mentioned aboved (eg iclass) and you have also had no success reading it with the NFC or Picopass app, it means the type of card is not yet supported by the firmware. the devs are working their asses off to meet the hype and expectations so be patient; you can aide in bringing attention to this lack of support by filing a github issue including as much information as you have regarding the credential and reader including make &amp; model &amp; brand, filing a github issue does not ensure the support will be added quickly it just brings it to the attention of the devs &amp; community developers who may be able to assist. </li> <li>The flipper is a good tool but it is not perfect and there will be things it can never do. If you are interested in researching more into RFID feel free to join the Flipper discord and engage with the <code>#125khz-rfid</code> channel. </li> </ul>"},{"location":"about/","title":"About This Site","text":"<p>This site is an unofficial non-commercial wiki run by Flipper Zero community members in effort to gather information in one local place.</p>"},{"location":"about/#disclaimer","title":"Disclaimer","text":"<p>The Flipper Community Wiki makes no guarantee of validity or accuracy</p> <p>Although we strive to be as accurate as possible, The Flipper Community Wiki is created almost completely by its contributors, who may submit invalid or unreliable information.</p> <p>Please be aware that any information you may find in The Flipper Community Wiki may be inaccurate, misleading or dangerous \u2014 although most information presented on The Flipper Community Wiki has been \"reviewed\" and corrected by other volunteers. None of the authors, contributors, sponsors, administrators, sysops, vandals, or anyone else connected with The Flipper Community Wiki, in any way whatsoever, can be responsible for your use of the information contained in or linked from The Flipper Community Wiki.</p>"},{"location":"about/#legal","title":"Legal","text":"<p>No copyright or trademark infringement is intended in using Flipper Devices content and/or other corporations and businesses mentioned on the Flipper Community Wiki. </p> <p>Site logo artwork is attributed to Flipper Devices. \"Flipper Zero\" and other trademarks and artwork are wholly-owned by Flipper Devices. </p> <p>The content of this wiki is created and maintained by the community and does not represent the official views, statements, or endorsements of Flipper Devices. Flipper Devices is not responsible for the accuracy, completeness, or reliability of the information provided on this wiki. All contributions are made voluntarily by individual users and do not reflect the opinions or policies of Flipper Devices, its affiliates, or representatives.</p> <p>Information contributed to the Flipper Wiki is licensed under CC BY-NC-SA 4.0</p>"},{"location":"arcadecards/","title":"Arcade Cards","text":""},{"location":"arcadecards/#arcade-data-cards","title":"Arcade Data Cards","text":"<p>WARNING</p> <p>You should not be using your Flipper Zero to emulate your arcade data card.</p> <p>The five main arcade data cards currently in use are:</p> Company Card Chip FeliCaAIC SupportedGames AndamiroAM AM.PASS ICODE SLIICODE SLIXICODE SLIX2 - Pump It Up Bandai NamcoBN Bandai Namco PassportBanapass / BNP MIFARE Classic X \u592a\u9f13\u306e\u9054\u4ebaTaiko no Tatsujin\u6e7e\u5cb8\u30de\u30ad\u30b7Wangan Maxi Konami e-amusement passe-amuse / eap ICODE SLI X DanceDanceRevolutionSOUND VOLTEX Sega Aime MIFARE Classic X CHUNITHM\u982d\u6587\u5b57DInitialDmaimai Taito NESiCA MIFARE Ultralight X MUSIC DIVERSTREET FIGHTER <p>The Flipper Zero includes the MFC <code>Sega Aime</code> and <code>Bandai Namco Passport</code> access keys in the system dictionary as of OFW 0.98.2.</p> <p>The <code>Sega Aime</code> parser reveals its access code.</p> <p>The latter four companies have FeliCa card variants endorsed with the <code>Amusement IC Card [AIC]</code> logo.</p> <p>The Flipper Zero expanded its <code>FeliCa</code> emulation support as of OFW 0.103.1.</p>"},{"location":"arcadecards/#arcade-data-card-emulation-compatibility","title":"Arcade Data Card Emulation Compatibility","text":"Card Chip AM BN Konami Sega Taito AIC FeliCa - X X - - Aime MFC - X - - - AM.PASS ICODE X - - - - Banapass MFC - X - - - e-amuse ICODE - - - - - NESiCA MFU - - - - X"},{"location":"arcadecards/#arcade-data-card-emulation-compatibility-notes","title":"Arcade Data Card Emulation Compatibility Notes","text":"<ul> <li>If FeliCa emulation does not work, you firstly need to:<ol> <li>Back up your microSD card;</li> <li>Reboot your Flipper Zero;</li> <li>Synchronise your Flipper Zero with your Mobile App / qFlipper;</li> <li>Update to the latest OFW Version; then,</li> <li>Update any installed Apps;</li> </ol> </li> <li>If FeliCa emulation still does not work, you then need to:       <ol> <li>Back up your microSD card;</li> <li>Format your microSD card;</li> <li>Factory reset your Flipper Zero;</li> <li>Re-connect your Flipper to your Mobile App / qFlipper;</li> <li>Re-update to the latest OFW Version; then,</li> <li>Re-install any external Apps.</li> </ol> </li> <li>There is an issue that prevents the Flipper Zero from emulating:<ol> <li>FeliCa <code>Amusement IC Cards</code> on <code>Sega</code> games;</li> <li>ICODE SLI <code>e-amusement pass</code> cards on <code>Konami</code> games;</li> <li>MFC <code>Aime</code> cards on <code>Sega</code> games; and,</li> <li>MFC <code>Bandai Namco Passport</code> cards on <code>Sega</code> games.</li> </ol> </li> <li>Emulation compatibility cannot be tested for <code>Taito</code> games without further assistance from Members located within Japan.</li> <li>The ICODE SLI <code>e-amusement pass</code> cards are not compatible with <code>Andamiro</code> games and vice versa.</li> </ul>"},{"location":"arcadecards/#arcade-payment-cards","title":"Arcade Payment Cards","text":"<p>WARNING</p> <p>You should not be using your Flipper Zero to emulate your arcade payment card.</p> <pre><code>flowchart TD\n    A[I Want to Emulate my Cashless Pre-Paid Arcade Payment Card.] --&gt;|Check Phone| B[NFC-Capable Phone?]\n    B --&gt;|No| H{PHONE EMULATION NOT POSSIBLE. DO NOT USE YOUR FLIPPER ZERO.}\n    B --&gt;|Yes: Disabled| D(Enable NFC.)\n    D --&gt;|NFC Enabled| C\n    B --&gt;|Yes: Enabled| C[I Use...]\n    C --&gt;|Apple/Google Wallet| E[My Arcade Uses...]\n    C --&gt;|Other Wallet| H\n    E --&gt;|Embed| F(Login to Arcade's App/Member Portal.)\n    F --&gt;|Add Card to Wallet| G{Emulate Card via Wallet.}\n    E --&gt;|Other System| H</code></pre>"},{"location":"arcadecards/#mobile-wallet","title":"Mobile Wallet","text":"<p>Dave and Buster'sDownload the D&amp;B Rewards<sup>\u00ae\ufe0f</sup> app and sign up for an account to add your digital Power Card<sup>\u00ae\ufe0f</sup> to your mobile wallet. 1. D&amp;B Rewards: App Store 1. D&amp;B Rewards: Google Play</p> <p>Timezone / KingpinDownload the Timezone Rewards App and sign up for an account to add your digital Powercard to your mobile wallet. 1. Timezone Rewards App: App Store 1. Timezone Rewards App: Google Play</p> <p>LIST OF CASHLESS PRE-PAID ARCADE PAYMENT CARDS</p> <p><li>Amusement Connect</li><li>ArcadePilot</li><li>Embed</li><li>intercard</li><li>Parafait</li><li>RFpay</li><li>Sacoa</li><li>Tigapo</li><li>YUTO Games</li></p>"},{"location":"badusb-overview/","title":"BadUSB Overview","text":"<p>BadUSB is an official feature of the Flipper Zero that can allow the device to act as a high speed keyboard to automatically type just about anything you would be able to do on a normal keyboard, just significantly faster via USB or Bluetooth. </p> <p>The BadUSB scripting language is based on Duckyscript 1.0. Unlike later version of Duckyscript, this version only supports sending keys to a PC, not receiving any files or info back to the Flipper Zero itself. The Flipper Zero's version of Duckyscript also supports changing the USB ID presented to the computer in the event one wishes to make the devices appear as a specific brand of keyboard. </p> <p>On a fresh firmware install of the official firmware, several non-destructive fun sample scripts will be placed in the <code>badusb</code> folder of your device. These are simple text files and can be read with notepad to see what they do prior to running them. </p>"},{"location":"badusb-overview/#supported-keys","title":"Supported Keys","text":"<p>Currently supported keys and other useful BadUSB script commands can be found at the Official BadUSB developer documentation site. </p> <p>For convenience, a basic list of supported keys can be found below:</p> <ul> <li>Standard alphanumeric typing keys</li> <li>Special characters</li> <li>CTRL, ALT, SHIFT, WIN, SYSRQ keys</li> <li>All function lock keys (caps, scroll, and number lock)</li> <li>Special keys such as insert, home, page-up, etc.</li> <li>Media keys, including volume</li> <li>ALT+NUMPAD combos</li> <li>Fn key / Mac Globe key</li> <li>F1-F12 keys</li> <li>Arrow keys</li> </ul>"},{"location":"badusb-overview/#javascript-utilization","title":"Javascript Utilization","text":"<p>BadUSB scripts are very basic and simply go down the list of commands sequentially, offering no execution order control. </p> <p>With the introduction of javascript and the BadUSB module included as part of the javascript implementation, one can begin to add more advanced logic to BadUSB scripts such as loops, conditionals, GUI menus, and other items. </p> <p>For more information on this subject, see the Javascript wiki page</p>"},{"location":"contributing/","title":"Contributing To The Wiki","text":"<p>The underlying Github repo can be located here. </p>"},{"location":"contributing/#contributer-guidelines","title":"Contributer Guidelines","text":"<p>The following guidelines should be kept in mind when submitting changes:</p> <ul> <li>This wiki may grow to support other Flipper items beyond just the Flipper Zero, so be precise about which device you reference. </li> <li>Our audience is international based, so use clear and precise language, avoiding slang or acronyms without explanation.</li> <li>Do not provide guides to facilitate illegal activity.<ul> <li>This includes but is not restricted to: jamming, illegal radio transmitting, defeating regional frequency locks, and fraud</li> </ul> </li> <li>Do not provide direct links to firmwares that allow the enablement of illegal activity or defeating radio transmission region locks</li> <li>Keep your writing tone non-biased and professional.</li> <li>if you upload any images, please try to keep them below 2 Megabytes in size. </li> </ul>"},{"location":"contributing/#wiki-structure","title":"Wiki Structure","text":"<p>The General structure of this wiki is detailed below:</p> <ul> <li>Getting Started: contains basic info for using the device as well as commonly asked questions. </li> <li>Subsystems: contains general and technical information of the different device subsystems not related to any one specific project. Guides/Tutorials should NOT go here. </li> <li>Development: contains general and technical development information not related to any one specific project. Guides/Tutorials should NOT go here. </li> <li>Guides &amp; Tutorials: Contains guides, tutorials, walkthroughs for any item related to the Flipper Zero. <ul> <li>If you are making a guide or tutorial for a category, you will want to include it here. </li> </ul> </li> </ul>"},{"location":"contributing/#text-formatting-examples","title":"Text Formatting Examples","text":""},{"location":"contributing/#markdown","title":"Markdown","text":"<p>link to another wiki page</p> <p>link to another page and section</p> <p>Italic</p> <p>Bold</p> <p>Bold Italic</p> <p>Underlined</p> <p>Quote Indent</p> <p>Tables:</p> First Header Second Header Third Header Content Cell Content Cell Content Cell Content Cell Content Cell Content Cell <p><code>single code line</code></p> <pre><code>multi line\ncodeblock\n</code></pre> <p><pre><code>print(\"Multi line codeblock\")\nprint(\"with lang specific syntax highlighting\")\n</code></pre> Local Image Embed</p> <p></p> <p>Remote Image Embed with scaling</p> <p></p>"},{"location":"contributing/#material-theme-extended-markdown","title":"Material Theme Extended Markdown","text":"<p>The material theme provides extended features for markdown. See the official reference page for extended examples. </p> <p>note admonition</p> <p>sample note with helpful info</p> collapsable note admonition <p>sample note with helpful info</p> <p>warning admonitions</p> <p>sample warning</p> <p>Diagram using Mermaid syntax <pre><code>graph LR\n  A[Start] --&gt; B{Did you read docs?};\n  B --&gt;|No| C[Hmm...];\n  C --&gt; D[read again];\n  D --&gt; B;\n  B ----&gt;|Yes| E[Yay!];</code></pre></p>"},{"location":"contributing/#html","title":"HTML","text":"<p>MkDocs supports basic HTML tag formatters as an alternative to markdown. Markdown cannot be used inside of an HTML tag block, only on the outside. </p> <p><p>Notice: Notice text example</p></p> <p><p>Warning: Warning Text Example</p></p>"},{"location":"development-overview/","title":"Development Overview","text":"<p>Flipper Zero development is done via two primary tools:</p> <ul> <li> <p>FBT: This tool is the complete build tool, and it included when doing a full clone of the flipper zero firmware repository. This tool allows for the building of any component (firmware, app, or animation) for the Flipper Zero.  </p> </li> <li> <p>UFBT: Considered the 'lite' version of FBT, this tool is focused on external app building only. </p> </li> </ul> <p>Both of these tool currently provide a command in their respective documentation to get a Visual Studio Code environment up and running.</p>"},{"location":"development-overview/#development-documentation","title":"Development Documentation","text":"<p>The official documentation for development can be found here.</p> <p>Work is ongoing to continue to add more information to the official development docs, and the source code is still currently the best way to study how things work.</p> <p>As linked in the official development docs, a few sample applications can be found here.</p>"},{"location":"development-overview/#useful-links","title":"Useful Links","text":""},{"location":"development-overview/#official-links","title":"Official Links","text":"<ul> <li>Flipper Application Package Overview</li> <li>Flipper Zero development keynote presentation: Contains lots of basic core knowledge surrounding development.</li> <li>Flipper Zero GUI Overview: Describes the design and workflow intended for drawing GUI items.</li> <li>Flipper Zero API symbols: Provided as a list of API functions and headers, any items here with a <code>+</code> on them should be active. </li> </ul>"},{"location":"development-overview/#community-links","title":"Community Links","text":"<ul> <li>Flipper zero dev tutorials from Derek Jamison<ul> <li>Associated Youtube Channel</li> </ul> </li> <li>Lopaka, a web based GUI editor to build UI layouts for Flipper Zero and other embedded platform displays. </li> </ul>"},{"location":"faq-general/","title":"Frequently Asked Questions","text":"<p>This page aims to collect frequent or common questions people may have related to the Flipper Zero.</p>"},{"location":"faq-general/#flipper-zero","title":"Flipper Zero","text":""},{"location":"faq-general/#is-the-flipper-zero-sold-on-amazon-or-aliexpress","title":"Is the Flipper Zero sold on Amazon or AliExpress?","text":"<p>No. </p> <p>Those shops are run by scalpers/unauthorized resellers, so you will be charged more money than the device is worth or potentially scammed. </p> <p>Additionally, you will lose your device's warranty by buying from these shops. </p> <p>See the offical Flipper Zero how to buy site for trusted sellers. </p>"},{"location":"faq-general/#what-can-the-flipper-zero-do","title":"What can the Flipper Zero do?","text":"<p>All of the cool things the device can do are nicely laid out in the official docs!</p>"},{"location":"faq-general/#should-i-ask-chatgpt-or-other-ai-tools-about-flipper-zero","title":"Should I ask ChatGPT or other AI tools about Flipper Zero?","text":"<p>Please do not ask AI tools about the Flipper Zero or development on it. Due to the fact that the Flipper zero is such a unique device, these tools almost always are guaranteed to get the information wrong. In our extensive testing it CANNOT be relied on for any information, whether thats seller information or development information or code. Please instead seek information from the official product site.</p> protip <p>chatgpt is cringe bro. Do your own research fr.</p>"},{"location":"faq-general/#will-this-device-make-me-a-super-cool-hacker-so-i-can-hack-my-entire-city","title":"Will this device make me a super cool hacker so I can hack my entire city?","text":"<p>No. This devices is geared for educational use to learn about tech, not for you to be a menace to society. TikTok and Instagram videos love to lie about its features, so you will be disappointed if you're buying based on that. </p> <p>Go and re-read what flipper zero can do.</p> <p>Also keep this in mind:</p> <p></p>"},{"location":"faq-general/#can-i-use-a-flipper-zero-if-i-have-a-chromebook","title":"Can I use a Flipper Zero if I have a Chromebook?","text":"<p>Yes, however you will be limited to only using Flipper Lab due to the security restrictions chromebooks have. qFlipper, and by extension the DFU recovery process, will not be avaliable on a chromebook.  See this troubleshooting article for more info. </p>"},{"location":"faq-general/#where-do-i-get-cool-stuff-for-my-flipper-zero","title":"Where Do I Get Cool Stuff for my Flipper Zero?","text":"<p>Nearly anything for the device is available on GitHub. </p> <ul> <li>The Awesome Flipper repo on GitHub has a huge amount of links and info.</li> <li>UberGuidoZ has a number of random signal recordings.</li> <li>The IRDB repo contains a large assortment of infrared remotes.</li> </ul>"},{"location":"faq-general/#can-the-flipper-zero-copy-any-rfid-card","title":"Can the Flipper Zero copy any RFID card?","text":"<p>No. NFC/RFID is a broad and more complex topic. There are different card/tag types and Flipper can not read or emulate all of them. Some are protected with passwords. Some can be cracked, some can't. Some cards can only be read partially. Emulating partial info may not result in the reader accepting the signal.</p> <p>The supported types and what can be read can be found in the docs: </p> <ul> <li>https://docs.flipper.net/nfc/</li> <li>https://docs.flipper.net/rfid</li> </ul>"},{"location":"faq-general/#how-can-i-make-nfc-files-with-links-or-other-things","title":"How can I make NFC files with links or other things?","text":"<p>You have three options to create a NTAG type card with this info:</p>"},{"location":"faq-general/#web-based","title":"Web Based","text":"<ul> <li>Flipper Tools</li> <li>Flipper Maker</li> </ul>"},{"location":"faq-general/#app-based","title":"App based","text":"<p>If your phone supports NFC, you can use the NFC Tools app on Android &amp; IOS.</p> <p>This app can allow you to create all manner of records for the NTAG NFC file. </p> <p>To use it, create a new blank NTAG on your Flipper Zero, emulate the blank tag, then have your phone write to that tag. </p>"},{"location":"faq-general/#can-i-take-my-flipper-zero-on-an-airplane","title":"Can I take my Flipper Zero on an airplane?","text":"<p>It's completely fine to travel with your Flipper Zero to any country the device is sold in. In case you are going on an airplane and through security, here's a few tips on what you should do:</p> <ul> <li>Turn the device off and treat it like any other electronic device in your carry-on bag.</li> <li>If asked, do not lie. Tell them that the device is an electronic multi-tool.</li> <li>After landing and before using your Flipper Zero in your destination country, make sure to update via qFlipper. That way, the frequency restrictions will be updated to that country's laws and regulations.</li> </ul> <p>A lot of people have flown with and passed security checks with Flippers on them before, there haven't been any reported incidents. </p>"},{"location":"faq-general/#can-flipper-zero-read-creditdebit-cards","title":"Can Flipper Zero read Credit/Debit cards?","text":"<p>No, you cannot use Flipper Zero to emulate your bankcard.  These cards are protected by encryption.</p> <p>While the Flipper Zero used to show some public details of the card in release 0.81.1, this was later removed due to confusion from both people and companies that caused them to think the Flipper Zero might be able to 'skim' bank cards. The information the device was reading was just the unencrypted part of the card. All actual payment related functions are encrypted on the card and are impossible for the Flipper Zero to read. </p>"},{"location":"faq-general/#can-flipper-zero-emulate-travel-passes-bus-passes","title":"Can Flipper Zero emulate travel passes / bus passes?","text":"<p><p>DO NOT ATTEMPT. This will likely be considered FRAUD!</p> </p> <p>Do not try to copy &amp; emulate a transport card! This is a good way to end up with at minimum being banned from a transportation service, or at worst criminal charges if you attempt to actually use your Flipper Zero in place of a transportation pass. </p> <p>All it takes is a single report to authorities that you are not using an approved pass and you will have massive problems. </p>"},{"location":"faq-general/#what-cool-modules-should-i-buy-with-my-flipper-zero","title":"What cool modules should I buy with my Flipper Zero.","text":"<p>It's typically recommended to just stick with the basics (Flipper Zero + optional Wi-Fi development board) until you learn what you're doing and what things you want your device to do.  Otherwise, its likely that whatever you buy will just end up in a drawer gathering dust after a few days because you don't have any good uses, or worse: because you don't know how to set up the module. </p> <p>If you know what you want, a few popular module overviews are listed in the GPIO page</p>"},{"location":"faq-general/#can-flipper-zero-copy-car-remotes","title":"Can Flipper Zero copy car remotes?","text":"<p>Warning</p> <p>Attempting to clone car remotes will fail and can lead to a VERY expensive mistake!</p> <p>Short answer: No. Car remotes typically use rolling code to prevent copying to generate new codes each button press. Any attempts may cause the remote to desync, likely requiring an expensive trip to the dealer to fix your remote.</p> <p>The Flipper Zero does not support the cloning of any rolling code automotive remote. </p> <p>See this site for an example of how the basics of rolling codes work.</p>"},{"location":"faq-general/#can-flipper-zero-copy-garage-remotes","title":"Can Flipper Zero copy garage remotes?","text":"<p>Maybe! Refer to the chart below:</p> <p><pre><code>graph LR\n  A[Start] --&gt; B{is the remote using a supported frequency? * };\n  B --&gt; |Yes| C{Is it using a rolling code system?};\n  B --&gt; |No| D[You cannot copy the remote.];\n  C --&gt; |No| F[You can likely copy the remote!];\n  C --&gt; |Yes| E{Is your rolling code supported? **};\n  E --&gt; |Yes| G[You can possibly create and pair a new remote! ***];\n  E --&gt; |No| D;</code></pre> * Supported Frequencies</p> <p>** Supported Rolling Codes</p> <p>*** Creating and pairing a new remote</p>"},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#what-to-do-after-getting-your-flipper-zero","title":"What To Do After Getting Your Flipper Zero","text":"<ul> <li>Read the official docs!<ul> <li>Seriously, Read them!</li> <li>Have we mentioned how great they are?!</li> <li>Do you know how cool reading them makes you?!</li> </ul> </li> <li>Read our very cool FAQ!</li> <li>Having issues? Check out the Troubleshooting page!</li> </ul>"},{"location":"getting-started/#what-not-to-do","title":"What Not To Do","text":""},{"location":"getting-started/#do-not-try-copying-a-car-remotekeyfob","title":"Do Not Try Copying a Car Remote/Keyfob","text":"<p>Warning</p> <p>Attempting this anyway can lead to a VERY expensive mistake!</p> <p>Car remotes use rolling code to prevent copying. Any attempts may cause the remote to desync, requiring an expensive trip to the dealer to fix your remote. </p> <p>See the FAQ on this for more info. </p>"},{"location":"getting-started/#do-not-downgrade-below-112","title":"Do Not Downgrade Below 1.1.2","text":"<p>If you have updated your Flipper Zero to version 1.1.2, do not try downgrading later to an older version unless you know what you are doing.  Changes have been made that can now cause weirdness on previous firmware versions. See this page for more info</p>"},{"location":"getting-started/#getting-help","title":"Getting Help","text":"<ul> <li>Check out the troubleshoot guide</li> <li>Read through the FAQ</li> <li>Join the Flipper Discord</li> </ul>"},{"location":"gpio-overview/","title":"GPIO Modules Overview","text":"<p>Per the Flipper official documentation, GPIO modules allow you to extend the Flipper Zero's capabilities with addon modules. </p>"},{"location":"gpio-overview/#popular-modules","title":"Popular modules","text":"<p>The below is NOT a complete list, and only lists a few of the popular available modules for the Flipper Zero.</p>"},{"location":"gpio-overview/#cc1101","title":"CC1101","text":"<p>Warning</p> <p>there are many poor quality clones sold online. Source genuine Ebyte CC1101 modules when you can to avoid ineffective hardware.</p> <p>CC1101 modules allow you potentially increase the range of both transmitting and receiving subghz frequencies on your Flipper Zero. However, these modules are typically only tuned for effectively transmitting well on one given frequency or on a small frequency range. Common tunings often select for either 433 MHz or 900 MHz. These devices do not have modifiable firmware and are ready to use out of the box. </p>"},{"location":"gpio-overview/#esp32","title":"ESP32","text":"<p>ESP32's are a microcontroller that can include Wi-Fi as well as Bluetooth or Zigbee and come in a variety of different form factors. Some popular ones are:</p> <ul> <li>Official Flipper Wi-Fi Development Board (based on ESP32-S2)</li> <li>ESP32-WROOM</li> <li>ESP32-S2-WROVER</li> <li>ESP32-S3</li> </ul> <p>They can act as standalone devices and/or connect to the Flipper Zero's GPIO in order to provide communication between the devices. All ESP32 devices require firmware to run. This can either be pre-flashed by the seller or it can be left to the buyer as a task to do. Current popular firmwares:</p> <ul> <li>Black Magic: This firmware is geared for debugging Flipper Zero applications. Intended for the official Wi-Fi development board, but can be run on other equivalent ESP32 models with the proper pinouts.</li> <li>Marauder: This firmware will work on most ESP32's and enables them to perform 2.4 GHz only Wi-Fi offensive and defensive tests. It also includes select bluetooth features as well on specific ESP32 boards that are bluetooth capable. </li> </ul>"},{"location":"gpio-overview/#nrf-24","title":"NRF-24","text":"<p>These modules are capable of handling either bluetooth communication or direct 2.4 GHz communication (Not including Wi-Fi).  These chips do not contain modifiable firmware, and are ready to go out of the box to be used for projects. These are currently only really used to perform the mousejacking technique. </p> <p>Note</p> <p>Mousejacking only works on a very specific small list of wireless mice and mice/keyboard combos. Outside of these devices, it is likely that this technique cannot be used at all.</p>"},{"location":"hardware-overview/","title":"Hardware Development Overview","text":"<p>Flipper Zero offers a number of GPIO pins that offer multiple peripheral modes as well. Official documentation for the GPIO header, including details on power available to modules, can be found here.</p>"},{"location":"hardware-overview/#expansion-modules","title":"Expansion Modules","text":"<p>The Flipper Zero RTOS allows for automatic discovery of modules plugged in to the GPIO header via the Expansion Module Protocol. An example of this is the Video Game Module.</p> <p>It is not necessary for modules to support the Expansion Module Protocol, many modules available today do not; but it does allow for automatic discovery and configuration.</p>"},{"location":"hardware-overview/#flipper-applications-and-gpio","title":"Flipper Applications and GPIO","text":"<p>Flipper applications have full control over GPIO with some caveats on what pins can have their interrupts modified or peripherals they can be used for. See the official documentation linked above for an overview of that.</p> <p>The official development documentation has some basic documentation at the moment on interacting with GPIO pins and their peripheral modes. Development of this documentation is ongoing and will be updated over time.</p>"},{"location":"hardware-overview/#useful-links","title":"Useful Links","text":""},{"location":"hardware-overview/#official-links","title":"Official Links","text":"<ul> <li>Flipper Expansion Module Protocol</li> <li>Flipper GPIO and Modules Overview</li> <li>Flipper Zero External Module Blueprints</li> <li>Flipper Zero Schematics and BOM</li> </ul>"},{"location":"hardware-overview/#community-links","title":"Community Links","text":"<ul> <li>PCB EDA Libraries: Provides schematic symbol and footprint libraries to make GPIO module development easier. Currently has libraries for KiCad and EagleCAD.</li> </ul>"},{"location":"infrared-overview/","title":"Infrared Overview","text":"<p>The Flipper Zero contains both an infrared receiver and 3 powerful infrared LED's that have a transmit range of about a maximum of 10 meters, depending on the environment. The infrared system is only half duplex, meaning it can only transmit or receive. It cannot do both at the same time. By default, the Flipper Zero can transmit at frequencies up to 56 kHz, but only receive frequencies at 38 kHz. </p> <p>For general usage information, see the official documentation page on infrared.</p>"},{"location":"infrared-overview/#hardware","title":"Hardware","text":""},{"location":"infrared-overview/#transmitter","title":"Transmitter","text":"<p>The infrared LED's are driven directly by the underlying hardware using several hardware timers and DMA, and have no true limit for carrier frequency other than what this configuration will allow from a stability standpoint. Limited reports have suggested that using a carrier frequency at or above 56 kHz may introduce instability with timing. For this reason, the Flipper Zero firmware conservatively limits the transmitter to 56 kHz via <code>INFRARED_MAX_FREQUENCY</code>. There is no notable hardware risk if one desires to change this value, so long as it is understood that higher values are not guaranteed to be accurate in transmission timings for all scenarios. One limited testing of 76 kHz confirmed that devices will respond to this custom higher carrier frequency from the Flipper Zero, even though the timings are not perfect. </p> <p>An upcoming change in the dev firmware will allow IR frequencies of up to 1 MHz, which is the theoretical limit of what the MCU can handle. </p>"},{"location":"infrared-overview/#receiver","title":"Receiver","text":"<p>The Flipper Zero includes a Vishay TSOP75338TR receiver. This receiver is configured to receive a carrier frequency of 38 kHz while filtering out external environmental noise. This also means that the Flipper Zero is not capable from a hardware perspective of receiving carrier frequencies above 38 kHz. </p>"},{"location":"infrared-overview/#useful-links","title":"Useful Links","text":""},{"location":"infrared-overview/#official-links","title":"Official Links","text":"<ul> <li>Flipper infrared file format layout</li> </ul>"},{"location":"infrared-overview/#community-links","title":"Community Links","text":"<ul> <li>Flipper-IRDB: Community driven database of Flipper Zero formatted infrared files that anyone can contribute to.</li> <li>IrScrutinizer: A tool to convert many infrared formats into IRDB formatting, which can be easily converted into a form recognizable by the Flipper Zero. </li> </ul>"},{"location":"javascript-overview/","title":"Javascript on the Flipper Zero","text":"<p>The Flipper Zero supports a stripped down version of Javascript based on MJS for more advanced scripting and control of other modules provided by apps on the Flipper Zero. Currently, this is largely limited to GUI and BadUSB automation modules. </p> <p>The official javascript development documentation can be located here. </p>"},{"location":"javascript-overview/#useful-links","title":"Useful Links","text":""},{"location":"javascript-overview/#official-links","title":"Official Links","text":"<ul> <li>Official Javascript Development Documentation</li> </ul>"},{"location":"javascript-overview/#community-links","title":"Community Links","text":"<ul> <li>Derek Jamison's Javascript Overview</li> </ul>"},{"location":"mifareclassic/","title":"MIFARE Classic","text":"<p>Here are the steps to follow in order to read your cards. Your goal is to find as many keys as possible. The keys unlock sections of your card for the Flipper to read them - you must have a card. Once you read enough sections, you can use an emulated or cloned card at the original card reader to unlock it (sometimes even without finding all of the keys!).</p>"},{"location":"mifareclassic/#prerequisites","title":"Prerequisites","text":"<p>You must update your firmware (how-to) to the latest official firmware (OFW) release (version 1.1.2 or later). You must also install the MFKey app (version 3.0 or later).</p>"},{"location":"mifareclassic/#reading-the-card","title":"Reading the Card","text":"<p>Steps:</p> <ol> <li>Read From NFC App:Try to scan your MIFARE Classic card with NFC -&gt; Read. It will try a dictionary (and KDF) attack of default keys to unlock your card, as well as any keys you may have found through other methods. If it finds 32/32 keys (or 80/80) with 16/16 sectors (or 40/40), congratulations and proceed to \"Emulation\". If not, wait for nonce collection to complete (be patient!) and continue to step 2.</li> <li>Crack With MFKey App:Navigate to Main Menu -&gt; Applications -&gt; NFC -&gt; MFKey, press OK to run. Do not interrupt the cracking process, it may take a while! When the cracking process is complete, the number of new user keys (or candidate keys) that are found will be shown. If more than zero keys are found, return to step 1 and repeat the process.</li> </ol>"},{"location":"mifareclassic/#troubleshooting","title":"Troubleshooting","text":"<p>Q: I have zero keys, how do I find more?</p> <p>A: You can find more keys from the card reader (the same one you would normally tap your card against) using the Mfkey32 attack. Navigate to NFC -&gt; Extract MF Keys and hold the Flipper Zero up to the reader. If the reader unlocks during this process, it is using the UID of the card and is highly insecure. Otherwise, it'll collect \"nonces\" from the reader. You can crack the nonces to find the reader keys by running MFKey following Extract MF Keys (navigate to Main Menu -&gt; Applications -&gt; NFC -&gt; MFKey, press OK to run).</p> <p>When the cracking process is complete, the number of new user keys (or candidate keys) that are found will be shown. If more than zero keys are found, return to step 1 of Reading the Card and repeat the process.</p> <p>Q: When I read the card in the NFC app, it says \"(Hard)\" at the top, and when I use MFKey it errors with \"No nonces found\". How do I find new keys?</p> <p>A: You need to perform a Hardnested attack using the nonces your Flipper Zero saved when reading the card. You have two options:</p> <ul> <li>Follow the guide to run HardnestedRecovery here.</li> <li>Upload the .nested.log from your device (nfc/.nested.log on your SD card) to this website and copy any found keys back to your user dictionary (nfc/assets/mf_classic_dict_user.nfc on your SD card). You can also manually add new keys on the Flipper by navigating to Main Menu -&gt; NFC -&gt; Extra Actions -&gt; MIFARE Classic Keys -&gt; Add.</li> </ul>"},{"location":"mifareclassic/#emulation","title":"Emulation","text":"<p>Go to NFC -&gt; Saved -&gt; (The name you assigned your card) -&gt; Emulate and hold it up to the reader. Try various angles to find the correct positioning.</p> <p>Even if you have all of the keys and try to emulate your card, you may find the reader still does not accept the emulated card (https://flp.wiki/nfc/mfc/emulation/). This is often a timing issue (slow emulation on the Flipper Zero). You have three options:</p> <ul> <li>Update your Flipper Zero to the latest firmware (0.94.0 or above). Flipper Devices rewrote the NFC stack, which improved MIFARE Classic dictionary attacks and emulation.</li> <li> <p>Purchase a special kind of MIFARE Classic card called a magic card to clone the data onto a physical card. Magic cards are more likely to be recognized by the card reader, however some readers may be programmed to detect magic cards. To find shops to purchase magic cards from, search for the magic card you need (ensure the listing mentions the term \"UID changeable\"):</p> <ul> <li>4 byte UID (e.g. <code>AA BB CC DD</code>): Gen1a Magic Card (\ud83d\udcb2), Gen2 Magic Card - 4 byte UID variant (\ud83d\udcb2\ud83d\udcb2)</li> <li>7 byte UID (e.g. <code>AA BB CC DD EE FF 00</code>): Gen2 Magic Card - 7 byte UID variant (\ud83d\udcb2\ud83d\udcb2), Gen4/Ultimate Magic Card (\ud83d\udcb2\ud83d\udcb2\ud83d\udcb2)</li> </ul> <p>Follow the official guide to write the card data to a magic card: (https://docs.flipper.net/nfc/magic-cards).</p> </li> <li> <p>If you have a spare identical MIFARE Classic card (1K for 1K, 4K for 4K, EV1 for EV1, etc.), have all of the keys to the spare card, and the access conditions on the spare card allow: you can duplicate the data from the initial card to the spare card and it could possibly work (if the reader is indifferent to the UID of the card, and if the keys are diversified - you will need the diversified keys from the reader using Mfkey32/KDF provided they are not already present on the card).</p> </li> </ul> <p>WARNING</p> <p>Save the data stored on the spare card before overwriting it, otherwise it will be irrecoverably erased. This is less reliable than using a magic card, but an option if you are unable to obtain a magic card.</p>"},{"location":"nfc-overview/","title":"NFC Overview","text":"<p>The official Flipper Zero NFC docs detail what type of NFC tags can be used with the Flipper Zero, and whether it can: - Read the NFC tag; - Write to the NFC tag; - Save the NFC tag as an <code>.nfc</code> file; and/or, - Emulate the saved NFC tag.</p>"},{"location":"nfc-overview/#hid-iclass","title":"HID iCLASS","text":"<ul> <li>Use PicoPass to read standard-keyed iCLASS and some elite-keyed iCLASS.</li> <li>Use Seader with a compatible NARD and SAM to read some iCLASS SE credentials.</li> </ul>"},{"location":"nfc-overview/#hid-seos","title":"HID Seos","text":"<ul> <li>Use Seader with a compatible NARD and SAM to read standard-keyed Seos.</li> </ul>"},{"location":"nfc-overview/#felica","title":"FeliCa","text":"<ul> <li>Also known as Felicity Card</li> <li>If applicable:</li> <li>See our Arcade guide.</li> <li>See our Public Transport guide.</li> </ul>"},{"location":"nfc-overview/#nxp-mifare-classic","title":"NXP MIFARE Classic","text":"<ul> <li>See our MIFARE Classic guide.</li> <li>See Flipper Zero's Magic Cards doc for making copies of a MIFARE Classic.</li> <li>If applicable:</li> <li>See our Arcade guide.</li> <li>See our Public Transport guide.</li> </ul>"},{"location":"nfc-overview/#nxp-mifare-desfire-nxp-mifare-plus-nxp-mifare-ultralight","title":"NXP MIFARE DESFire / NXP MIFARE Plus / NXP MIFARE Ultralight","text":"<ul> <li>Use the <code>NFC</code> App to read basic information about a MIFARE.</li> <li>If applicable:</li> <li>See our Arcade guide.</li> <li>See our Public Transport guide.</li> </ul>"},{"location":"privacy-policy/","title":"Privacy Policy","text":"<p>Effective Date: May 25, 2025</p> <p>Last Updated: May 25, 2025</p> <p>The Flipper Community Wiki (flipper.wiki) respects your privacy and is committed to protecting personal data in accordance with the General Data Protection Regulation (GDPR). This policy explains how we collect and use anonymized information to improve our website.</p>"},{"location":"privacy-policy/#1-information-we-collect-anonymized","title":"1. Information We Collect (Anonymized)","text":"<p>When you visit our website, we may automatically collect the following non-personally identifiable information:</p> <ul> <li>IP address (anonymized)  </li> <li>Browser type and version </li> <li>Device type and technical details (e.g., operating system, screen size)  </li> <li>Approximate geographic location (country level only) </li> <li>Page interactions (e.g., pages visited, time on page, clicks)</li> </ul> <p>Note: This data is collected in a way that does not allow us to identify you personally.</p>"},{"location":"privacy-policy/#2-purpose-of-collection","title":"2. Purpose of Collection","text":"<p>The data is used solely for the following legitimate interests under Article 6(1)(f) of the GDPR:</p> <ul> <li>Monitoring website performance  </li> <li>Understanding user behavior for optimization  </li> <li>Improving usability and content relevance  </li> <li>Ensuring site functionality</li> </ul> <p>All data is anonymized before analysis and cannot be used to identify individual users.</p>"},{"location":"privacy-policy/#3-legal-basis","title":"3. Legal Basis","text":"<p>We process anonymized data based on our legitimate interests in maintaining and improving our website. Since no personal data is used to identify you, and the data is anonymized at the point of collection, GDPR does not require consent for this specific processing activity.</p>"},{"location":"privacy-policy/#4-data-sharing-and-retention","title":"4. Data Sharing and Retention","text":"<p>We may use third-party analytics services to help us understand site usage. These service providers are contractually bound to process data in a secure and privacy-compliant manner.</p> <ul> <li>No personal data is shared with third parties  </li> <li>Anonymized data may be retained for analytical purposes for as long as necessary to fulfill the purposes stated above</li> </ul>"},{"location":"privacy-policy/#5-your-rights","title":"5. Your Rights","text":"<p>As the data we collect is fully anonymized and cannot be linked to any individual, the rights typically afforded under the GDPR (such as access, rectification, or erasure) do not apply to this data. If you have any concerns, however, please open an issue on the associated Github for this wiki. </p>"},{"location":"privacy-policy/#6-cookies-and-tracking-technologies","title":"6. Cookies and Tracking Technologies","text":"<p>We may use cookies or similar technologies for collecting anonymized usage data. You can adjust your cookie preferences or disable cookies via your browser settings.</p>"},{"location":"privacy-policy/#7-changes-to-this-policy","title":"7. Changes to This Policy","text":"<p>We may update this Privacy Policy from time to time. The latest version will always be available on this page with the updated effective date.</p>"},{"location":"privacy-policy/#8-contact-us","title":"8. Contact Us","text":"<p>If you have any questions about this Privacy Policy or our data practices, please open an issue on Github detailing your question. </p>"},{"location":"publictransport/","title":"Public Transport Cards","text":"<p>WARNING</p> <p>The below information is for educational purposes only, and is NOT designed to facilitate fare evasion.</p>"},{"location":"publictransport/#resources","title":"Resources","text":"<ul> <li>MetroDroid</li> <li>Metroflip</li> <li>NFC TagInfo by NXP: Google Play</li> <li>NFC TagInfo by NXP: App Store</li> </ul>"},{"location":"publictransport/#felica","title":"FeliCa","text":"<p>If you have a Japan Rail IC Card, then you can use either <code>MetroDroid</code> or the Android version of <code>NFC TagInfo by NXP</code> to view some information relating to the card. <code>Metroflip</code> is currently adding support for HKG Octopus and Japan Rail IC Cards, and this page will be updated when <code>Metroflip</code>'s author releases that update.</p>"},{"location":"publictransport/#mifare-classic","title":"MIFARE Classic","text":"<p>If your transit agency is using MIFARE Classic, then follow the MIFARE Classic guide.</p>"},{"location":"publictransport/#mifare-desfire","title":"MIFARE DESFire","text":"<p>If your transit agency is using MIFARE DESFire, then use either your Flipper Zero's <code>Metroflip</code> and <code>NFC</code> apps, and the <code>MetroDroid</code> app to see if your transit card has any unlocked applications/files that reveal information such as:</p> Example 1 Example 2 Card Name Opal (SYD) metroCARD (ADL) Card Number 3085 2212 3456 7890 01-141 2345 6789 0123 Fare Type Full Fare Regular Transaction Type Tap off Current Balance $10.00 Last Txn Date/Time Wed 5th Jul 4:20pm 31 May 2024 at 06:19 Balance Updated 12:34 10/01/2025 Vehicle Type Bus Bus 1234 Weekly Journeys 1 Transaction Counter 12 Issue Date 1 January 2024 Expiry Date 30 June 2044 Machine Code 123 <p>Some transit agencies allow you to scan your card via their mobile app, which may provide additional information such as:</p> Example 3 Card Name Leap (DUB) App Leap Top-Up Current Balance \u20ac0.00 Card Number 10123 45678 Status Unblocked Auto Top-Up Status Disabled (\u20ac0.00) Issue Date 6/9/23 Expiry Date 20/4/43 Fare Type Adult Last Txn Date/Time 19 Jun 13:37 Dublin Bus -\u20ac2.00 Daily Cap \u20ac0.00 / \u20ac8.00 Weekly Cap \u20ac0.00 / \u20ac32.00 <p>If the card is fully-locked, then the only valuable piece of information would be the six hexadecimal Application IDs; these may be found by looking at the Flipper Zero <code>.nfc</code> file or by scanning your card via the <code>NFC TagInfo by NXP</code> app.</p> <p>Feel free to discuss public transport in #nfc.</p>"},{"location":"subghz-overview/","title":"Flipper Zero Sub-GHz Overview","text":"<p>The Flipper Zero, according to the official documentation, has the following hardware setup: </p> <p>Flipper Zero has a built-in sub-1 GHz module based on a CC1101 transceiver and a radio antenna (the maximum range is 50 meters). Both the CC1101 chip and the antenna are designed to operate at frequencies in the 300-348 MHz, 387-464 MHz, and 779-928 MHz bands.</p> <p>Upon your first firmware update, the associated official app used to update your Flipper Zero will automatically set your region. By doing so, the device will automatically prevent you from transmitting on frequencies that civilians do not have a license for. This by extension will prevent you from accidentally interfering with radio items such as emergency services, aircraft transmissions, or other items used by the government. It will also automatically set the appropriate transmit strength for your country so that you avoid any legal penalties for high powered transmitting.</p>"},{"location":"subghz-overview/#sub-ghz-file-formats","title":"Sub-GHz File Formats","text":"<p>The file formats for the files generated by the Sub-GHz system are detailed on the FlipperZero-Firmware GitHub documentation.</p> <p>As the standard RAW preset is a little unusual to look at, it has additionally been detailed below. </p>"},{"location":"subghz-overview/#standard-raw-preset","title":"Standard RAW Preset","text":"<p>The standard RAW format file, as detailed in the earlier mentioned documentation, is an array of timings in microseconds. The <code>+</code> and <code>-</code> symbols represent high and low states for the data transmitted. Values must start with a positive value, then switch between high and low states. a single <code>RAW_Data:</code> line can have no more than 512 timings total. However, multiple <code>RAW_Data:</code> lines can exist in the <code>.sub</code> file.</p> <p>To describe this more directly, lets say we have this sample raw recording of some short signal:</p> <p><code>RAW_Data: 100 -100 200 -200</code></p> <p>You would have the following information in order:</p> <ul> <li>100 microseconds HIGH</li> <li>100 microseconds LOW</li> <li>200 microseconds HIGH</li> <li>200 microseconds LOW</li> </ul> <p>Flipper Lab contains a pulse plotter that can be used to more easily visualize these raw recordings. </p>"},{"location":"subghz-overview/#external-community-resources","title":"External Community Resources","text":""},{"location":"subghz-overview/#derek-jamison","title":"Derek Jamison","text":"<ul> <li>Decoding Sub-GHz Raw Data</li> <li>Sub-GHz Data Rate</li> <li>Sub-GHz tutorials Wiki</li> </ul>"},{"location":"troubleshooting/","title":"Troubleshooting","text":"<p>It is recommended first that you check out the Device Troubleshooting section of the official troubleshooting docs before proceeding below, as your question may be answered there. </p> <p>For guides to troubleshoot some of the more obscure Flipper Zero issues, see the items below:</p> <ul> <li>Troubleshooting<ul> <li>Flipper Zero<ul> <li>Error code on updating</li> <li>Forgotten/unknown Flipper Zero PIN</li> <li>Flipper Zero is experiencing lag or behaving slow</li> <li>Infrared or SubGHz does not appear to be working</li> <li>After firmware downgrade the battery status does not work</li> </ul> </li> <li>Windows<ul> <li>Flipper Zero not appearing under Bluetooth in Windows 11</li> <li>DFU mode is not being recognized by qFlipper</li> </ul> </li> <li>Linux<ul> <li>Error while loading shared libraries: libOpenGL.so.0</li> <li>Flipper Zero not recognized by qFlipper</li> <li>Fedora qFlipper not detecting Flipper Zero</li> <li>Ubuntu cannot run the appimage</li> </ul> </li> <li>ChromeOS<ul> <li>qFlipper returns permission denied</li> </ul> </li> </ul> </li> </ul>"},{"location":"troubleshooting/#flipper-zero","title":"Flipper Zero","text":""},{"location":"troubleshooting/#error-code-on-updating","title":"Error code on updating","text":"<p>If you are experiencing an error code when updating, you can look at the error code list from the OTA update process docs to narrow down your issue.  In most cases, errors are typically caused by an improperly formatted or failing MicroSD card and will correspond to the <code>Updating resources</code> error code section. </p>"},{"location":"troubleshooting/#forgottenunknown-flipper-zero-pin","title":"Forgotten/unknown Flipper Zero PIN","text":"<p>See the official docs page for PIN reset instructions.</p> <p>If you are still having problems, browse your MicroSD card and delete the hidden <code>.int</code> folder and try the above steps in the docs again. </p>"},{"location":"troubleshooting/#flipper-zero-is-experiencing-lag-or-behaving-slow","title":"Flipper Zero is experiencing lag or behaving slow","text":"<p>This is an issue that is most commonly caused by certain development features being enabled and putting strain on the CPU of the flipper.  To fix this, run through the following steps:</p> <ol> <li>Press the center button on your flipper</li> <li>navigate to Settings</li> <li>Scroll down and select System</li> <li>Scroll down again and check that the following options are set:<ul> <li>Log Level: <code>Default</code></li> <li>Debug: <code>OFF</code></li> <li>Heap Trace: <code>None</code></li> </ul> </li> </ol> <p>After these are set, press back and leave the menu. Reboot your flipper. The issue should now be gone. </p>"},{"location":"troubleshooting/#infrared-or-subghz-does-not-appear-to-be-working","title":"Infrared or SubGHz does not appear to be working","text":"<p>This is an issue that can occur from switching between firmwares. To fix this, try the following:</p> <ol> <li>Connect your flipper to your PC</li> <li>Open Up qFlipper</li> <li>go to your SD card files</li> <li>make sure Show Hidden Files is enabled</li> <li>on your SD card, locate and delete the <code>/.int</code> folder<ul> <li>This will delete out the old misconfigured settings from past firmwares.</li> </ul> </li> <li>Go back to qFlipper, and reinstall the latest firmware</li> <li>Unplug and try using your Flipper Zero again to verify the device works as expected.</li> </ol>"},{"location":"troubleshooting/#after-firmware-downgrade-the-battery-status-does-not-work","title":"After firmware downgrade the battery status does not work","text":"<p>It is recommended that you do not downgrade below version 1.1.2 due to a total rework of how the battery gauge works as well as a rework of the internal clock. If for some reason you do need to downgrade, you will need to do the following prior to downgrading below 1.1.2 version:</p> <ul> <li>Turn off any alarm settings under Settings -&gt; Clocks &amp; Alarms</li> <li>compile and run the battery gauge tool to unseal security settings on the battery gauge</li> </ul>"},{"location":"troubleshooting/#windows","title":"Windows","text":"<p>Note</p> <p>Before trying Windows troubleshooting, try the Official qFlipper Troubleshooting Guide FIRST!</p> <p>If those steps did not help, you may continue below.</p>"},{"location":"troubleshooting/#flipper-zero-not-appearing-under-bluetooth-in-windows-11","title":"Flipper Zero not appearing under Bluetooth in Windows 11","text":"<p>If you are attempting to use either badusb in bluetooth mode or the remote function of the flipper, Windows 11 now requires a new setting to see the flipper. </p> <ol> <li>Open Settings from your start menu</li> <li>Go to Bluetooth &amp; Devices</li> <li>change Bluetooth Device Discovery to <code>Advanced</code></li> </ol> <p>Your Flipper Zero should now be discoverable. </p>"},{"location":"troubleshooting/#dfu-mode-is-not-being-recognized-by-qflipper","title":"DFU mode is not being recognized by qFlipper","text":"<p>This commonly occurs when a driver is conflicting with the DFU driver. To remedy this, follow the steps below:</p> <ol> <li>Download the Zadig driver tool</li> <li>With you Flipper Zero unplugged, do the steps necessary to put your Flipper Zero into DFU mode</li> <li>Open the Zadig tool</li> <li>In the Zadig tool, choose <code>Options</code>, then <code>List all devices</code></li> <li>Choose the <code>DFU in FS mode</code> item</li> <li>Make sure the winusb driver is selected, then press <code>Reinstall driver</code></li> </ol> <p>Close the tool out, unplug your Flipper Zero and plug it back in. qFlipper should now recognize your flipper.</p>"},{"location":"troubleshooting/#linux","title":"Linux","text":""},{"location":"troubleshooting/#error-while-loading-shared-libraries-libopenglso0","title":"Error while loading shared libraries: libOpenGL.so.0","text":"<p>This error most commonly occurs on Debian, but can occur on some other distros as well.  To fix this, you will need to install the <code>libopengl0</code> package.</p> <p>On Debian, this can be done via <code>sudo apt install libopengl0</code>. </p>"},{"location":"troubleshooting/#flipper-zero-not-recognized-by-qflipper","title":"Flipper Zero not recognized by qFlipper","text":"<p>Typically this issues is the result of not installing the udev rules. To fix this, follow the steps below:</p> <ol> <li>open a terminal and <code>cd</code> to the directory of your qFlipper appimage</li> <li>run <code>./qFlipper-x86_64.AppImage rules install</code></li> <li>once this reports it installed successfully, reboot your pc</li> </ol> <p>Alternatively, you may try running qFlipper with <code>sudo</code>, however this is not ideal and has security implications. </p>"},{"location":"troubleshooting/#fedora-qflipper-not-detecting-flipper-zero","title":"Fedora qFlipper not detecting Flipper Zero","text":"<p>First, verify you installed the udev rules from the steps detailed in this page. If it still is not detected, you may be experiencing a known conflict between the udev rules of Flipper Zero and the udev rules of the <code>sysdemd-udev</code>package. This will require you to manually apply a fix related to one of the udev rules.</p> <p>See this Github issue for further details. </p>"},{"location":"troubleshooting/#ubuntu-cannot-run-the-appimage","title":"Ubuntu cannot run the appimage","text":"<p>This is likely due to a missing library. </p> <ol> <li>Verify you have enabled the <code>Universe</code> repo, and updated your local apt database using <code>apt update</code> </li> <li>run <code>sudo apt install libfuse2</code> to install the missing libfuse2 library. </li> <li>make sure your appimage is set as executable</li> </ol> <p>The appimage should now run. </p>"},{"location":"troubleshooting/#chromeos","title":"ChromeOS","text":""},{"location":"troubleshooting/#qflipper-returns-permission-denied","title":"qFlipper returns permission denied","text":"<p>ChromeOS users will have to only utilize Flipper Lab, no other option is currently possible for ChromeOS. </p> <p>While ChromeOS does allow USB devices to access Linux environments via <code>Settings &gt; Linux &gt; USB preferences</code>, the security hardening features of ChromeOS  prevent udev scripts from applying the <code>uaccess</code> property to the device within the context of the secure linux container, which is needed for qFlipper to properly access the Flipper Zero. Attempting to run qFlipper with <code>sudo -E</code> is also fruitless. This roadblock lies firmly on the ChromeOS side for the time being. While Flipper Labs is nearly at feature parity with qFlipper, it cannot perform a DFU recovery. Should such a need arise, you will need temporary access to a non ChromeOS based PC. </p>"},{"location":"video-game-module/","title":"Video Game Module","text":"<p>The Video Game Module, developed and sold by Flipper Devices, is an exciting gaming GPIO attachment that takes your Flipper Zero to the next level. Here\u2019s what it offers:</p> <ul> <li>Motion Sensor: Adds a new dimension of interactivity by detecting motion for games or creative projects.  </li> <li>USB-C Port: Connect to external devices or power up with ease.  </li> <li>HDMI Port: Play your games or display visuals on monitors and TVs.  </li> <li>14-Pin GPIO Port: Connect external peripherals or explore custom projects with ease.  </li> <li>Raspberry Pi RP2040 Microcontroller: Delivers high performance and flexibility for endless possibilities.  </li> </ul>"},{"location":"video-game-module/#features","title":"Features","text":"<p>The Video Game Module unlocks a wide range of capabilities: - Gaming on the Big Screen: Play your Flipper Zero games on your TV or monitor, enhanced with motion controls for hands-free action. - Standalone Mode: Use it independently of the Flipper Zero for gaming or as a powerful prototyping tool. - Open Source: With open-source firmware and schematics, you can tweak, extend, and share your own enhancements. - Seamless Compatibility: Fully integrates with Flipper Zero for gaming and development, while remaining versatile for other projects.  </p>"},{"location":"video-game-module/#firmware","title":"Firmware","text":"<p>Flashing the Video Game Module is easy with the Video Game Module Tool App. Here's what you can do: - Install Official Firmware: Directly update through the app for hassle-free setup. - Use Custom Firmware: Load <code>.uf2</code> files onto your Flipper Zero\u2019s SD card to unlock custom features.  </p> <p>You can also flash the Raspberry Pi Pico series using this app! Just follow this simple wiring guide:  </p>"},{"location":"video-game-module/#wiring-guide-pico-flipper-zero","title":"Wiring Guide  (Pico -&gt; Flipper Zero)","text":"<ul> <li>SWCLK (left debug pin) \u2192 Pin 10 (SWC) </li> <li>GND \u2192 Pin 11 (GND) </li> <li>SWDIO (right debug pin) \u2192 Pin 12 (SIO) </li> <li>Pin 36 (3V3 OUT) \u2192 Pin 9 (3v3) </li> <li>Pin 39 (VSYS) \u2192 Pin 1 (5v) </li> <li>Pin 1 (TX) \u2192 Pin 14 (RX) </li> <li>Pin 2 (RX) \u2192 Pin 13 (TX) </li> </ul>"},{"location":"wifi-devboard/","title":"Official Wi-Fi Development Board.","text":"<p>The official Wi-Fi development board sold by Flipper Devices is at it's core an ESP32-S2, which can be technically be flashed with any firmware that supports the ESP32. While the board does support 2.4 GHz Wi-Fi, the S2 model does not support Bluetooth. Additionally, the official board only supports 2.4 GHz Wi-Fi and does NOT support 5 GHz Wi-Fi. </p>"},{"location":"wifi-devboard/#official-purpose-of-the-wi-fi-development-board","title":"Official Purpose Of The Wi-Fi Development Board","text":"<p>The official Wi-Fi development board sold by Flipper Devices is geared primarily for debugging firmware and application for the Flipper Zero. Due to this, it arrives pre-flashed with the BlackMagic firmware to enable both wired and wireless debugging. </p> <p>Documentation for how to begin debugging with the board can be found in the official flipper zero documentation. </p>"},{"location":"wifi-devboard/#community-uses-for-the-board","title":"Community Uses For The Board","text":"<p>If one does not desire to do development with the board or wants to try a different use for the board, it is possible to flash the Wi-Fi board with alternate firmware to try new functions. </p> <p>The following is a partial list of a few popular community firmware that one may use for the board that also have companion apps for the Flipper Zero:</p> <ul> <li>Marauder, an offensive security testing platform for ESP32 based devices, featuring both Wi-Fi tools and Bluetooth tools for hardware supporting bluetooth. </li> <li>FlipperHTTP, a multi-purpose firmware that uses HTTP requests to retrieve information from websites, download applications from the catalog, connect with users on social media platforms, and extract data from APIs.</li> <li>GhostESP, a firmware that provides tools to perform comprehensive Wi-Fi and Bluetooth Low Energy (BLE) analysis, execute targeted wireless tests, and explore dynamic wireless environments.</li> </ul>"},{"location":"wifi-devboard/#useful-links","title":"Useful Links","text":"<ul> <li>FZEE flasher, an easy web based ESP flasher for installing popular firmware with only a few clicks. </li> <li>EspWebTool, a more manual and general purpose web flasher tool for all ESP32 devices, requires having pre-built firmware binaries.</li> <li>Ghost ESP Flasher, Online flasher for flashing GhostESP to supported ESP32 devices.  </li> </ul>"},{"location":"tutorials/Animation_guide_meta/Meta_settings_guide/","title":"Flipper Animation Guide : meta.txt settings","text":"<p>Guide credited to Kuronons</p> <p>\"I got myself a Flipper Zero to learn coding... and ended up making pixel-art. Life... ya never know...\"</p> <p>Indepth guide to the meta.txt file settings which is used to set all the parameters of a Flipper Zero animation. </p> <p>Note</p> <p>For better visualization and understanding, I am using a custom firmware that allows to hide the top status bar border as well as top status icons to provide suitable screenshots.</p>"},{"location":"tutorials/Animation_guide_meta/Meta_settings_guide/#metatxt-content-overview","title":"\ud83d\udcc4 meta.txt : content overview","text":"<p>Below an example of a meta.txt file content. (from Flipper Zero L1_Cry_128x64 animation) Meta is pure text file (.txt) and can be opened/edited via any text editor (such as Notepad).</p> <p>I colored in purple the part that is mandatory, in green what is optional (only applies if bubbles are used) and in white the data filled by the user.</p> <p></p>"},{"location":"tutorials/Animation_guide_meta/Meta_settings_guide/#flipper-zero-official-documentation-metatxt","title":"\ud83d\udc2c Flipper Zero official documentation : meta.txt","text":"<p>Flipper Devices provides basic information about meta file in their Github repo. The following (here collapsible) content can be found in flipperzero-firmware/assets/dolphin/readme.md</p> \ud83d\udd39 Definition &amp; Header settings <ul> <li>meta.txt : Flipper Format File with ordered keys.</li> <li>Header:</li> </ul> <pre><code>Filetype: Flipper Animation\nVersion: 1\n</code></pre> \ud83d\udd39 Animation dimensions settings <ul> <li><code>Width</code> - animation width in px (&lt;= 128)</li> <li><code>Height</code> - animation height in px (&lt;= 64)</li> </ul> \ud83d\udd39 Frames ordering <ul> <li><code>Passive frames</code> - number of bitmap frames for passive animation state</li> <li><code>Active frames</code> - number of bitmap frames for active animation state (can be 0)</li> <li><code>Frames order</code> - order of bitmap frames where first N frames are passive and following M are active. Each X number in order refers to bitmap frame, with name frame_X.bm. This file must exist. Any X number can be repeated to refer same frame in animation.</li> </ul> \ud83d\udd39 Animation settings <ul> <li><code>Active cycles</code> - cycles to repeat of N active frames for full active period. E.g. if frames for active cycles are 6 and 7, and active cycles is 3, so full active period plays 6 7 6 7 6 7. Full period of passive + active period are called total period.</li> <li><code>Frame rate</code> - number of frames to play for 1 second.</li> <li><code>Duration</code> - total amount of seconds to play 1 animation.</li> <li><code>Active cooldown</code> - amount of seconds (after passive mode) to pass before entering next active mode.</li> </ul> \ud83d\udd39 Bubbles settings <ul> <li><code>Bubble slots</code> - amount of bubble sequences.</li> <li> <p>Any bubble sequence plays whole sequence during active mode.   There can be many bubble sequences and bubbles inside it.   Bubbles in 1 bubble sequence have to reside in 1 slot.   Bubbles order in 1 bubble sequence is determined by occurrence in file.   As soon as frame index goes out of EndFrame index of bubble - next animation bubble is chosen.   There can also be free of bubbles frames between 2 bubbles.</p> </li> <li> <p><code>Slot</code> - number to unite bubbles for same sequence.</p> </li> <li><code>X</code>, <code>Y</code> - are coordinates of left top corner of bubble.</li> <li><code>Text</code> - text in bubble. New line is <code>\\n</code></li> <li><code>AlignH</code> - horizontal place of bubble corner (Left, Center, Right)</li> <li><code>AlignV</code> - vertical place of bubble corner (Top, Center, Bottom)</li> <li><code>StartFrame</code>, <code>EndFrame</code> - frame index range inside whole period to show bubble.</li> </ul> \ud83d\udd39 Frame indexes vizualisation <ul> <li>Understanding of frame indexes</li> </ul> <p>For example we have</p> <pre><code>Passive frames: 6\nActive frames: 2\nFrames order: 0 1 2 3 4 5 6 7\nActive cycles: 4\n</code></pre> <p>Then we have indexes</p> <pre><code>                        passive(6)            active (2 * 4)\nReal frames order:   0  1  2  3  4  5     6  7  6  7  6  7  6  7\nFrames indexes:      0  1  2  3  4  5     6  7  8  9  10 11 12 13\n</code></pre>"},{"location":"tutorials/Animation_guide_meta/Meta_settings_guide/#animation-meta-main-settings","title":"\ud83c\udfac ANIMATION : Meta Main settings","text":""},{"location":"tutorials/Animation_guide_meta/Meta_settings_guide/#frame-dimensions","title":"\ud83d\udd38  Frame dimensions","text":"<p>The first two settings listed in meta.txt are : - <code>Width:</code> being the frame measurement on the X axis, horizontal. - <code>Height:</code> being the frame measurement on the Y axis, vertical.</p> <p>Values \u200b\u200bare in pixels and must strictly match the dimensions of the animation frames. Since the Flipper screen can display 128x64 pixels, these would therefore be the max values.</p> <p></p> <p>While most animations (from official Flipper Devices or custom makers) are made, for convenience mainly, on this frame size, one can choose to make an animation with smaller frames.</p> <p>Official Flipper Devices firmware contains a bunch of animations that aren't 128x64px with values such as 128x51px or 128x49px. Most of those are stored in flash memory (internal &amp; blocked anims) which makes sense in saving as much octets as possible due to the very low internal storage capacity. But even within the official external animations (those saved on SD), we can notice 3 (as of Nov. 24) that also use a reduced frame format.</p> <p>For instance, the first frame of L1_Laptop_128x51, is (as its name specifies) only 51px high and will leave a 13px high unanimated area on top of the screen (blue-colored here) :</p> <p></p> <p>Frames are aligned on the BOTTOM LEFT corner without option to change that. While it is not an issue at all when it comes to height (as the upper part of screen is mostly displaying the status bar and icons), it should be kept in mind when setting a width inferior to 128 as animation will be left-aligned.</p> <p>For example, 64x32px frame position on screen :</p> <p></p> <p>Warning</p> <p>Setting dimensions different from the actual bitmap image, while not causing the animation to fail, will result in a distorted display. Note that this will occur when compiling an animation with faulty meta values, but also when later editing the meta of an animation previously compiled with correct values. For instance, the very same 64x32px bitmap frame wrongly set to <code>Width:54</code> &amp; <code>Height 22</code> and then to <code>Width:74</code> &amp; <code>Height 42</code> :</p> <p></p> <p>Tip</p> <p>\u27a4 Animation frame must be set up to 128x64px. \u27a4 Width &amp; Height values must match the pixel dimensions of the frames. \u27a4 Those being defined in the meta, all frames of one animation must have the same dimensions. \u27a4 Frames are bottom-left aligned. \u27a4 Using frames of dimensions inferior to 128x64px makes only sense when editing an animation meant to be put in Flipper's internal memory. There would not be any significant impact for the ones stored on SD.</p>"},{"location":"tutorials/Animation_guide_meta/Meta_settings_guide/#passive-active-frames-definition","title":"\ud83d\udd38  Passive &amp; Active Frames : definition","text":"<p>Animation frames can be of 2 kinds : passive or active.</p> <p>Passive frames are the ones that are played in loop on Flipper idle screen. An animation requires at least 1 passive frame to work. Therefore, minimum value could never go under 1. <code>Passive frames:</code> value defines the passive sequence by the number of frames that will be picked up from the ones listed in Frames order.</p> <p>Active frames are the ones that are played once triggered/activated. They have 2 possible triggers : Hitting the back button or coming back to animation screen from any other menu. Once triggered the active sequence will start to play. (ie. It won't wait for the passive sequence to end)</p> <p>An animation does NOT require active frame(s) to work. If no active frame, value must be set to 0. <code>Active frames:</code> value defines the activable sequence by the number of frames that will be picked up from the ones listed in Frames order.</p> <p>The sum of values of <code>Passive frames:</code> and <code>Active frames:</code> must equal to the number of frames listed in Frames Order.</p> <p>The use of active frames is of maker's choice. It provides to the user a basic level of interraction and can be designed in many artistic or playful ways.</p>"},{"location":"tutorials/Animation_guide_meta/Meta_settings_guide/#frames-order","title":"\ud83d\udd38  Frames Order","text":"<p><code>Frames order:</code> is used to define the sequences of passive and active frames. It lists the frames by calling the bitmap files via their designed number. (ie the number between frame_ and .bm in the file name : frame_12.bm = 12)</p> <p>Passive frames are always listed first. Active frames (if any) comes after. As said, the total of inputs must be equal to the sum of <code>Passive frames:</code> &amp; <code>Active frames:</code> values.</p> <p>On top of that, each bitmap file must be listed at least once by its number. As well, every listed input must refer to an existing bitmap file.</p> <p>In the following example (simple passive/active animation with no frame repetition), we have 10 .bm frames numbered frame_0.bm to frame_9.bm. 6 first frames (0 to 5) are set are the passive ones while the 4 remaining ones (6 to 9) are set to active.</p> <p></p> <p>A bitmap file can be listed multiple times, and be counted multiple times in passive and/or active frames. The frames order being the sequence(s) of bitmap displayed following maker's choice, it does NOT require to be a logical numerary suite (such as 1 2 3 4...) as long as it follows the requirements mentioned above.</p> <p>Next example shows those. It uses frame repetitions in an animation built on only 5 .bm frames numbered frame_0.bm to frame_4.bm, without listing the frames in a \"logical\" numerical order. We emphasize here that the number of active/passive frames is not related to the number of bitmap images, but rather to the number of calls of these in their respective sequences.</p> <p></p> <p>Still, trying to stick as much as possible to numeral order when it comes to name the bitmap files, accordingly to the position they should play within the animation, will greatly help building the frames order or editing it later (especially on long frames order listing 100+ inputs).</p> <p>Labelling of bitmap files requiring the first frame to be named frame_0.bm, the minimum input value in <code>Frames order:</code> is 0 in the case of a 1 only passive frame animation.</p>"},{"location":"tutorials/Animation_guide_meta/Meta_settings_guide/#active-cycles","title":"\ud83d\udd38  Active Cycles","text":"<p><code>Active cycles:</code> value determines the number of time the active frames sequence will play in a row once triggered.</p> <p>Once the the active period (ie the number of cycles of the active sequence) is over, animation will revert to passive one.</p> <p>Active cycles is a choice of design to limit the number of inputs listed in Frame order.</p> <p>If animation has no active frames (ie <code>Active frames: 0</code>), <code>Active cycles:</code> should be set to <code>0</code> too. As well if animation contains active frames, <code>Active cycles:</code> should be set to at least <code>1</code>.</p> <p>Warning</p> <p>If those values are not set accordingly, compiling the animation via <code>./fbt</code> (to make .png frames into .bm ones) will definitely fail.</p> <p></p> <p>However, and against all odds (and logics), an already compiled animation should still be able to play on Flipper without failure. For instance, <code>Active frames: 1</code> while there is no active frames : no noticeable consequences. But, having <code>Active frames: 0</code> when there are active frames will make the animation unable to trigger the active sequence : only passive frames will play in loop even if the back button is pushed.</p> <p>The number of frames that make up the active cycles above the first one are not counted as it in Active frames but will however be counted when it comes to bubbles.</p>"},{"location":"tutorials/Animation_guide_meta/Meta_settings_guide/#frame-rate","title":"\ud83d\udd38  Frame rate","text":"<p><code>Frame rate:</code> is the well known fps : Frames Per Second. It defines how many frames will be played during 1 second.</p> <p>Note</p> <p>Historically, theatre movie standard fps was set on 24. Drawn-animation however had usually a fps set to 12 and even lower (mainly due to production costs) such as 6 or 8 when it came to Saturday Morning Cartoons type animations.</p> <p>Flipper will not be able to handle very high fps mainly due to hardware limitation (RAM size and display capability). Flipper screen refresh rate being what it is, flickering or ghosting effect will occur if fps is set too high. As well, Flipper firmware may crash on high frame rate if RAM is oversatured.</p> <p>The usual working range of fps is 1-12, but it's not really recommended to have a frame rate above 8. All original Flipper animations (external, internal, blocked and event the level-up ones) have their frame rate set to 2.</p> <p><code>Frame rate:</code> value must be an integer (number without decimal) and therefore cannot be less than 1. As consequence, the slowest animation would be of 1 frame per second. Only way to have one frame to play longer on screen is to double its input in Frames order. The time each frame will play on screen is then calculated as follow : 1 second divided by frame rate. For instance, a frame rate of 4 will make each frame play 0.25 second on screen. Adjusting frame rate and playing with the inputs in Frames order makes visual acceleration or slow-down effects possible.</p>"},{"location":"tutorials/Animation_guide_meta/Meta_settings_guide/#duration","title":"\ud83d\udd38  Duration","text":"<p><code>Duration:</code> is used to determine the period of time one animation will run until it switches to the next random one. Duration values are seconds.</p> <p>By default, most animations have a duration value of 3600 which equals to 1 hour.</p> <p>Duration is an underestimated setting that can be used to polish transitions in a suite of animations.</p> <p>For example, having a total of 60 inputs in frames order and 2 as frame rate would result in a 30 seconds animation. In order to play this animation 5 times entirely before it switches to the next, <code>Duration:</code> would be set to <code>150</code>. This way, the switching will occur at the very end of the passive sequence instead of cutting it somewhere in the middle.</p> <p>Duration can also add some game aspect to a suite of animations. It can be used with passive/active animations having identical passive frames but different active sequences. Setting a duration of 10mn (600) for example will make the user curious about what will be revealed if he presses back as, whatever the animation of the set is playing, it would always be the same passive sequence looping on the screen.</p>"},{"location":"tutorials/Animation_guide_meta/Meta_settings_guide/#active-cooldown","title":"\ud83d\udd38  Active cooldown","text":"<p><code>Active cooldown:</code> is a delay, set in seconds, that will apply once an active period ends and during which the active sequence is not triggerable. It forces passive frames to play during the defined time, temporarily disabling the back-button active trigger.</p> <p>As well as for Active cycles, if animation has no active frames (ie <code>Active frames: 0</code>), <code>Active cooldown:</code> should be set to <code>0</code> too. As well if animation contains active frames, <code>Active cooldown:</code> should be set to at least <code>1</code>.</p> <p>Warning</p> <p>If those values are not set accordingly, compiling the animation via <code>./fbt</code> (to make .png frames into .bm ones) will definitely fail.</p> <p></p> <p>However, same as for Active cycles, an already compiled animation should still be able to play on Flipper without failure. For instance, <code>Active cooldown: 1</code> while there is no active frames : no consequences. And same goes with <code>Active cooldown: 0</code> while there are active frames.</p>"},{"location":"tutorials/Animation_guide_meta/Meta_settings_guide/#bubble-slots","title":"\ud83d\udd38  Bubble slots","text":"<p><code>Bubble slots:</code> value indicates the number of bubbles \"suites\" that are listed to be randomly used during the active sequence of the animation. It is not to be confused with the number of bubbles. A slot can have many bubbles within. If there are multiple slots, each time active sequence is triggered, a slot will be randomly chosen and its bubbles sequence will be played. Otherwise, if only if <code>Bubble slots:</code> is set to <code>1</code>, the suite will always play on active sequence. If animation is not using any bubble, value must be set to <code>0</code>.</p> <p>Warning</p> <p><code>Bubble slots:</code> value MUST be set accordingly to the defined number of slots set below. Animation will fail otherwise and Flipper would most likely crash !</p> <p>Since Bubbles is a complex subject in itself, its aspects will be reviewed in detail in the dedicated section below.</p>"},{"location":"tutorials/Animation_guide_meta/Meta_settings_guide/#animation-design-insight-samples","title":"\ud83d\udd38  Animation design : insight samples","text":"<ul> <li>The one-only frame \"animation\" 1 bitmap frame (frame_0.bm) set as 1 passive with only its input once in Frames order. All active settings as well as bubble ones set to 0. Frame rate set to minimum 1 as there is no meaning to have faster fps. As a result we get an unanimated animation. For those who want to have a static background image that will remain on screen as long as defined in Duration.</li> </ul> <ul> <li>Passive-only animation This format is probably the most used by those who make custom animations by converting existing gif, movie or anime excerpt. It will result in an only passive-framed animation that will play in loop until its duration ends. One of the clever uses of this design is to create a seamless looping animation. Wr3nch's X_X_F0Pattern (inspired by the interior design of the Flipper Zero carton box) is a perfect example: it seamlessly plays 11 passive frames (numbered 0-10) in a loop.</li> </ul> <ul> <li>Passive/active animation : simple design Official L1_Recording_128x51 is a good example of a basic passive/active animation. Here we have a total of 12 bitmap frames (numbered 0 to 11). They're listed in numerical order and only once in Frames order. The 6 first ones (0-5) are set as passive and the 6 others (6-11) as active with only 1 active cycle.</li> </ul> <ul> <li>Passive/active animation : complex design Official L1_Painting_128x64 is a more sophisticated passive/active animation. While still having only 1 active cycle, this animation is however using bubbles (2 on one slot). This design allows an animation to extend its duration by using single bitmaps more than once. With only 12 bitmap files, we end up with 22 inputs total in Frames order. It may be noted that creators of OFW animations usually have dedicated bitmaps for active and passive frames (here, respectively 0-5 and 6-11). This is not at all mandatory and is more of a design choice.</li> </ul>"},{"location":"tutorials/Animation_guide_meta/Meta_settings_guide/#bubbles-in-depth-guide","title":"\ud83d\udcac BUBBLES : in-depth guide","text":""},{"location":"tutorials/Animation_guide_meta/Meta_settings_guide/#bubbles-definition","title":"\ud83d\udd38  Bubbles : Definition","text":"<p>Bubbles are text inputs that will display as an additional layer above an animation, enclosed in coded-drawn lines in the spirit of comic book speech bubble. It's important to mention that bubbles were originally designed to be used only in an active sequence.</p>"},{"location":"tutorials/Animation_guide_meta/Meta_settings_guide/#bubble-slot","title":"\ud83d\udd38  Bubble slot","text":"<p>As previously mentioned, slots are suites of bubbles meant to randomly play during the active sequence of the animation. <code>Slot:</code> value indicates which slot the bubble will be part of. For instance, if slot #2 is randomly selected, only the bubbles being set to <code>Slot: 2</code> will play in the actual active sequence. Next time the active sequence will be triggered, another slot will be randomly chosen.</p> <p>As for frames, first slot is numbered <code>0</code>.</p> <p>A slot can have multiple bubbles within so every bubble of the same sequence must share the same <code>Slot:</code> value. Having only 1 bubbles slot (that will be labelled as 0) will logically cut the random process and the bubbles sequence will always play when active one is triggered.</p> <p>Warning</p> <p>\u27a4 All bubbles inside a same slot must be listed together in a row, one after another before listing the next slot bubbles. \u27a4 Only bubbles listed in a row under the same slot will display. ie. if you define Slot 0, first bubble, then Slot 1 first bubble and only then Slot 0, second bubble, this last one will not show up when Slot 0 will be randomly selected.</p> <p></p>"},{"location":"tutorials/Animation_guide_meta/Meta_settings_guide/#bubble-placement","title":"\ud83d\udd38  Bubble placement","text":"<p>Bubble placement on screen is defined by its upper-left corner coordinates. Screen is  128x64px. First column (X - from left) as well as first line (Y - from top) are designed by 0. Coordinates will be set as : - <code>X:</code> = horizontal coordinate (values range = <code>0</code> to <code>127</code>) - <code>Y:</code> = vertical coordinate (values range = <code>0</code> to <code>63</code>)</p> <p></p> <p>We will note that the bubble layer is not dependent of the animation frames size. Bubble sticks to its screen coordinates and won't be affected in any way when displayed out the animation frames area as the following test shows (64x32px frames anim) :</p> <p></p> <p>Tip</p> <p>The placement being only defined by the upper-left corner of the bubble, it must be thought in regards of those 3 factors : \u27a4 Lenght of the longest text line for the X value. \u27a4 Number of text lines for the Y one. \u27a4 Postion of the bubble tail</p> <p>Warning</p> <p>A negative value in X or Y will result of a furi_hal error and would most likely put your Flipper in an endless restart-loop !! If it happens, just get the SD out and fix the meta by entering a positive value. If you don't have an SD card reader, take the SD card out and re-insert it again without passing the SD welcome splash-screen. It will allow you to overwrite the non-functioning meta via qFlipper files management.</p>"},{"location":"tutorials/Animation_guide_meta/Meta_settings_guide/#bubble-text-line","title":"\ud83d\udd38  Bubble text line","text":"<p>The displayed text of the bubble is defined by the eponymous function : - <code>Text:</code> followed by the text to display. Note that the part of the text lenght that would be out of the screen will not be visible anyhow.</p> <p></p> <p>We see that a bubble can barely fit the 26 lowercase letters of the alphabet. Depending on text input, it's a matter of testing to check if it fits or not.</p> <p>To have multiple lines within the same bubble, <code>\\n</code> can be used to define newline. Next line first word should be written directly after the function. (no space in between).</p> <p>An input such as <code>Text: First line\\nSecond line\\nThird line\\nForth line\\nFifth line</code> would render as :</p> <p></p> <p>We note that we can only have up to 5 lines that would properly show on screen. Of course, this will be dependent of the bubble placement and some lines can be displayed out of screen depending on <code>Y</code> value. (<code>Y</code> must be set between 0 and 5 to be able to have 5 lines of text as well as the bubble outline in its whole displayed)</p> <p></p> <p>Same goes with too many lines. Only fully displayable lines are shown. If we set the <code>Y</code> at its minimum value (0) and set the text on 6 lines : <code>Text: First line\\nSecond line\\nThird line\\nForth line\\nFifth line\\nSixth Line</code> we end up with this result :</p> <p></p> <p>Tip</p> <p>\u27a4 A maximum of 5 lines of text in a bubble using the <code>\\n</code> function. \u27a4 A maximum of 20-30 characters (spaces included) on a line.</p>"},{"location":"tutorials/Animation_guide_meta/Meta_settings_guide/#bubble-tail-positioning","title":"\ud83d\udd38  Bubble tail positioning","text":"<p>The positioning of the tail (the bubble pointer) is set by those 2 functions and their applicable options : - <code>AlignH:</code> = Horizontal Alignment (Options = <code>Left</code>, <code>Center</code>, <code>Right</code>) - <code>AlignV:</code> = Vertical Alignment (Options = <code>Top</code>, <code>Center</code>, <code>Bottom</code>)</p> <p>As a result we have 9 (3x3) possible placement of the tail : </p> <p></p> <p>We note that having both <code>AlignH</code> &amp; <code>AlignV</code> set to <code>Center</code> results in hiding the tail.</p> <p>The coded outline of the bubble is not dependent of the animation background and will remain black even on top of a black background, and as consequence will not be visible :</p> <p></p> <p>It then renders slightly more squared as the rounded-angles of the outline are not visible.</p> <p>Tip</p> <p>Use <code>AlignH: Center</code> + <code>AlignV: Center</code> to have no bubble tail.</p>"},{"location":"tutorials/Animation_guide_meta/Meta_settings_guide/#bubble-coordinates-tail-positioning-issues","title":"\ud83d\udd38  Bubble coordinates &amp; Tail positioning issues","text":"<p>Here comes the tricky part : If you set a tail to be visible, in order to be correctly displayed on screen, its design in its whole must be set to fit on the screen. Otherwise, you will face some strange behaviours.</p> <p>Tails are adding a 4 pixels design on the edge of the bubble they're placed on.</p> <p></p> <p>To allow a tailed-bubble to be displayed on screen without issue, bubble coordinates values must be set taking into account those additionnal 4 pixels.</p> <p>Warning</p> <p>Issue will occur if there are less than 4 pixels between the screen's left or top border and the tail.</p> <p>Since a picture is worth a thousand words, let's see how it behaves if we define a bubble with insufficient space on the edges for its tail to be displayed correctly. In the following tests, we will set different bubble coordinates so that it lacks 1 single pixel to allow the tail to be fully displayed. Again we will test with both white (orange) and black backgrounds as it helps to understand what is drawn on screen.</p> <p></p> <p>It enlights that issues occur when there is not enough space on TOP and/or LEFT screen sides to display the tail, creating some backdraft tail that displays over the text. We note that, apart for just displaying what fits the screen, there is no particular issue with BOTTOM or RIGHT sides of the screen. We will also note that, despite there is no tail to be meant to be shown on middle screenshot (<code>AlignH</code> &amp; <code>AlignV</code> both set to <code>Center</code>), it still creates, for some reason, a single and unwanted pixel dot in the upper-left corner.</p> <p></p> <p>Black background allows to enlight that the tails themselves are correctly drawn and that the issue is only on their outlines.</p> <p>Testing on a single-line bubble makes even weirder result \ud83d\udc40 :</p> <p></p> <p>Note</p> <p>It's important to mention that those strange artifacts are just visual bugs and won't make Flipper to crash. One could decide to use those strange tail behaviours in some artistic way... </p> <p>Tip</p> <p>When bubble is a layer above the animation one, main screen status bar and icons/battery are on layers above bubble one. \u27a4 That must be taken into consideration to avoid having text partially covered by those. Ensure safe bubble coordinates and tail position accordingly. \u27a4 It's safer/easier to set your bubble <code>X:</code> &amp; <code>Y:</code> to at least <code>4</code> to ensure avoiding issue with tail. \u27a4 If possible, set your tail position to the sides (or center) of the bubble that are furthest from the edge of the screen.</p>"},{"location":"tutorials/Animation_guide_meta/Meta_settings_guide/#start-end-frame","title":"\ud83d\udd38  Start &amp; End Frame","text":"<p>To define when a particular bubble is meant to play within a slot sequence, the following functions are used : <code>StartFrame:</code> sets on which frame bubble starts playing <code>EndFrame:</code> sets the last frame bubble is playing</p> <p>Each value corresponds to the position of the frame on the total Passive + Active cycles sequence. It means that it takes into consideration not only the frames listed in Frames order but also counts the possible remaining Active cycle(s) that come after. \u27a4 As consequence a bubble can be set starting on an active cycle and ending on another.</p> <p>Note</p> <p>While it wasn't designed for, a bubble can be set to play during the passive cycle. \u27a4 However passive cycle will only play the first bubble of the slot and this one only even if additional ones have been set. \u27a4 If multiple slots, passive cycle bubble will randomly change slot only when active cycle is triggered. It would remain on the same slot in loop otherwise. \u27a4 If the <code>EndFrame</code> value is set incorrectly beyond the passive cycle last frame, it has no real consequence : bubble will stop playing on last passive frame. For instance if passive cycle contains 8 frames (0 to 7) and bubble is set to play from 5 to 12, it will only be played on frames 5 to 7. \u27a4 It behaves exactly the same way on active cycle, bubble would play until last active frame.</p> <p>As example, following animation has 8 passive frames (0-7) followed by 8 active ones (8-15) with a passive bubble (slot 0) set to display beyond passive cycle and an active bubble (slot 1) set to play beyond active cycle :</p> <p></p> <p>Warning</p> <p>A slot with a bubble set in passive cycle will not play the following bubbles even if set in active cycle.</p> <p>Tip</p> <p>To have passive + active bubbles playing along, you must set those on different slots. For instance you can use slots 0 &amp; 1 for passive and slots 2 &amp; 3 for active. The limitation in this pattern is that you can't force a logical suite between passive and active cycle bubbles if you have more than one slot defined for each cycle.</p> <p>O_oV</p>"},{"location":"tutorials/Marauder_guide/guide/","title":"Beginner's Guide To Installing Marauder On The Official Wi-Fi Dev Board For Use With The Flipper Zero","text":"<p>This guide aims to show how to set up and install Marauder onto the official Wi-Fi dev board for the Flipper Zero.  In most cases, the steps will be similar for other ESP32 based boards, however you will need to select a slightly different firmware build version for your specific board. </p> <p>There are several different methods listed below to flash the board, ranked in order of complexity. You only need to select one method.</p> <p>The general steps are:</p> <ol> <li>If you are running Windows, install the drivers under Prerequisites</li> <li>choose one connection method under Connection Methods</li> <li>Choose one method to flash it under Flashing Methods</li> <li>Install the Marauder companion app</li> </ol>"},{"location":"tutorials/Marauder_guide/guide/#prerequisites","title":"Prerequisites","text":""},{"location":"tutorials/Marauder_guide/guide/#windows","title":"Windows","text":"<ul> <li>install the USB-Uart drivers from SiliconLabs by following the below steps:<ol> <li>navigate to the USB-UART driver page</li> <li>click the item titled CP210x VCP Windows</li> <li>save the file to somewhere you can easily find it</li> <li>extract the zip file you downloaded</li> <li>click the CP210x VCP Windows item</li> <li>Run and Install CP210xVCPInstaller_x64.exe</li> </ol> </li> </ul>"},{"location":"tutorials/Marauder_guide/guide/#connection-methods","title":"Connection Methods","text":"<p>Decide how you can connect to your board. There are two choices:</p> <ul> <li>Direct Connection</li> <li>Flipper Zero GPIO Connection</li> </ul>"},{"location":"tutorials/Marauder_guide/guide/#direct-connection","title":"Direct Connection","text":"<p>Plug in the USB cable directly to the Wi-Fi dev board. </p>"},{"location":"tutorials/Marauder_guide/guide/#flipper-zero-gpio-connection","title":"Flipper Zero GPIO Connection","text":"<ol> <li>Insert the Wi-Fi board into the Flipper Zero</li> <li>Plug the USB cable into the Flipper Zero directly</li> <li>On the Flipper Zero, choose GPIO -&gt; USB-UART Bridge</li> </ol> <p>Once you've decided on one of the above connection styles, proceed to Flashing Methods. </p>"},{"location":"tutorials/Marauder_guide/guide/#flashing-methods","title":"Flashing Methods","text":"<p>The methods listed below are ranked from least to most complex. Choose only one method from the list below: </p> <ul> <li>Method 1: FZEE Web Flasher</li> <li>Method 2: ESP Web Flasher</li> <li>Method 3: ESPtool</li> </ul>"},{"location":"tutorials/Marauder_guide/guide/#method-1-fzee-flasher","title":"Method 1: FZEE Flasher","text":"<p>This tool is probably the simplest of all the methods, as it handles most of the complexity for you.</p> <p>Requirements: Webserial capable browsers such as Google Chrome or Microsoft Edge. Firefox and Safari are NOT supported. </p> <ol> <li>Put the Wi-Fi board in flashing mode:<ol> <li>Hold the BOOT button on the board.</li> <li>While continuing to hold the BOOT button, press and release the RESET button for one second. </li> <li>Wait 5 seconds, then release the BOOT button. </li> </ol> </li> <li>Navigate to the FZEE Flasher site</li> <li>Click Connect</li> <li>Depending on your connection style chosen above, you will see one of these two options to connect to in a new pop up window:<ul> <li>ESP32-S2</li> <li>Flipper flipperNameHere</li> </ul> </li> <li>Click one of those two connections and hit the connect button</li> <li>The text log should identify your board, in this case the official board should be detected as <code>Chip type ESP32-S2</code></li> <li>At the top of the site under <code>--- Select Board ---</code>, choose <code>Flipper Dev Board</code> if you are using the official Wi-Fi board</li> <li>Under <code>--- Firmware ---</code>, choose <code>Marauder</code></li> <li>Under <code>--- Version ---</code>, choose <code>latest</code></li> <li>Click the PROGRAM button on the site and wait a few minutes for completion</li> <li>If all goes well, you should get the message <code>---&gt; FLASHING PROCESS COMPLETED!</code></li> <li>Press and release the RESET button on the Wi-Fi board</li> </ol> <p>The board should now be ready to use with the Marauder companion app. </p>"},{"location":"tutorials/Marauder_guide/guide/#method-2-esp-web-flasher","title":"Method 2: ESP Web Flasher","text":"<p>Requirements: Webserial capable browsers such as Google Chrome or Microsoft Edge. Firefox and Safari are NOT supported.</p> <ol> <li>Navigate to the Marauder releases page and find the most recent version</li> <li>under Assets, look for the file with the name that ends in <code>_flipper.bin</code> for the official Wi-Fi dev board</li> <li>Click and download this file, saving it to somewhere you can find it</li> <li>Navigate to the Marauder Web Updater instructions</li> <li> <p>We will need to download and save the following files under the Flipper Zero WiFi Dev Board column and save them to the same area you downloaded the Marauder .bin file from earlier:</p> <ol> <li>Bootloader</li> <li>Partitions</li> <li>Boot App </li> </ol> <p></p> </li> <li> <p>Navigate to the ESP Web Tool</p> </li> <li>Put the Wi-Fi board in flashing mode:<ol> <li>Hold the BOOT button on the board</li> <li>While continuing to hold the BOOT button, press and release the RESET button for one second</li> <li>Wait 5 seconds, then release the BOOT button </li> </ol> </li> <li>Click Connect</li> <li>Depending on your connection style chosen above, you will see one of these two options to connect to in a new pop up window:<ul> <li>ESP32-S2</li> <li>Flipper flipperNameHere</li> </ul> </li> <li>Click one of those two connections and hit the connect button</li> <li> <p>Once connected, load the firmware files as follows:</p> <ol> <li>0x1000 slot: <code>esp32_marauder.ino.bootloader.bin</code></li> <li>0x8000 slot: <code>esp32_marauder.ino.partitions.bin</code></li> <li>0xE000 slot: <code>boot_app0.bin</code></li> <li>0x10000 slot: the file ending in <code>_flipper.bin</code> mentioned earlier</li> </ol> <p></p> </li> <li> <p>Click PROGRAM and wait a few minutes. </p> </li> <li>If all goes well, the Output section should say <code>Done!</code></li> <li>Press and release the RESET button on the Wi-Fi board</li> </ol> <p>The board should now be ready to use with the Marauder companion app. </p>"},{"location":"tutorials/Marauder_guide/guide/#method-3-esptool","title":"Method 3: ESPtool","text":"<p>This method will utilize the official flashing tool from Espressif for flashing ESP32 based boards.  Because the tool is python based, we can leverage a tool called <code>uv</code> for setting up a quick way to manage python tools even if you dont have or want to install python directly on your system. </p> <p>While esptool and uv work on all operating systems, we will use Microsoft Windows 11 as the OS for the instructions below. </p>"},{"location":"tutorials/Marauder_guide/guide/#prerequisites_1","title":"Prerequisites","text":"<p>We will need to install the <code>uv</code> tool.</p> <p>Simply open Powershell and run <code>winget install astral-sh.uv</code> and wait for the setup to complete.</p>"},{"location":"tutorials/Marauder_guide/guide/#install-process","title":"Install Process","text":"<p>Once installed continue with the below instructions:</p> <ol> <li>Navigate to the Marauder releases page and find the most recent version</li> <li>under Assets, look for the file with the name that ends in <code>_flipper.bin</code> for the official Wi-Fi dev board </li> <li>Click and download this file, saving it into a folder called <code>marauder</code> for easy locating</li> <li>Navigate to the Marauder Web Updater instructions</li> <li> <p>We will need to download and save the following files under the Flipper Zero WiFi Dev Board column and save them to the same folder you downloaded the Marauder .bin file from earlier:</p> <ol> <li>Bootloader</li> <li>Partitions</li> <li>Boot App </li> </ol> <p></p> </li> <li> <p>Open up Powershell</p> </li> <li>Run <code>wmic path Win32_SerialPort get DeviceID,Name</code> and wait 15-30 seconds to get a list of serial devices on your system</li> <li>Unplug your Flipper Zero or Wi-Fi board from the USB connection and run the above command again, noting which connection disappeared</li> <li>Plug your device back in to the USB cable and  note down the COM port number</li> <li>Put the Wi-Fi board in flashing mode:<ol> <li>Hold the BOOT button on the board</li> <li>While continuing to hold the BOOT button, press and release the RESET button for one second</li> <li>Wait 5 seconds, then release the BOOT button </li> </ol> </li> <li>Using the COM port number you noted down, erase your board by doing <code>uvx --from esptool esptool --port yourComPortHere erase_flash</code></li> <li>You should get <code>Chip erase completed successfully</code></li> <li>Using the <code>cd</code> command, navigate into your <code>marauder</code> folder you made earlier that houses your firmware files</li> <li>Using <code>ls</code> you should see 4 files, similar to these:     </li> <li>If you see these files, proceed to the run the below multi-line single powershell command, replacing <code>comX</code> with your com port and <code>esp32_marauder_xxx_flipper.bin</code> with the actual name of your <code>_flipper.bin</code> file from step 1: <pre><code>uvx --from esptool esptool --chip esp32-S2 `\n--port comX write_flash -z `\n0x1000 esp32_marauder.ino.bootloader.bin `\n0x8000 esp32_marauder.ino.partitions.bin `\n0xE000 boot_app0.bin `\n0x10000 esp32_marauder_xxx_flipper.bin\n</code></pre></li> <li>Wait a few minutes for the command to complete</li> <li>If successful, you should get <code>Hash of data verified. Leaving... Hard resetting via RTS pin...</code></li> <li>Press and  release the RESET button once on the Wi-Fi dev board</li> </ol> <p>The board should now be ready to use with the Marauder companion app. </p> Cleanup Tip <p>If you dont want <code>uv</code> sticking around on your system, cleanup is very easy.   Just run <code>uv cache clean</code> to clean up all temp files, then do <code>winget uninstall astral-sh.uv</code> to remove the tool entirely. </p>"},{"location":"tutorials/Marauder_guide/guide/#installing-the-marauder-companion-app","title":"Installing The Marauder Companion App","text":"<p>The Marauder companion app is avaliable both on the Flipper mobile app and on Flipper Lab.  It can be added to your Flipper Zero here: https://lab.flipper.net/apps/esp32_wifi_marauder</p> <p>If you are unsure how to install applications on your Flipper Zero, see the Official Documentation on how to manage apps. </p>"},{"location":"tutorials/asset_creation/asset_creation_guide/","title":"Flipper Zero Asset Creation Tools Guide","text":"<p>A guide of all time that focuses on animation tools by pr3!</p>"},{"location":"tutorials/asset_creation/asset_creation_guide/#i-need-software","title":"I Need Software!","text":"<p>The real truth about Flipper animation is that you can use just about any software to create pixelart! No joke, I started with Microsoft Paint. Many people use many different softwares, however the usefulness those softwares are only depends on whether they have certain features.  It cannot be stressed enough that you can use anything! Find your preference!</p> <p>Note</p> <p>My preferred software is Aseprite, and I'll be using it along with a custom firmware for the sake of demonstration and preference. However, this guide can be applied to just about any firmware or art software. (If you use a terrible art software and a terrible firmware it's your fault)</p>"},{"location":"tutorials/asset_creation/asset_creation_guide/#art-softwares-their-features","title":"\u2023 Art Softwares + Their Features","text":"<p>Although technically you can use any art software to create pixelart, the silver lining is that some more dedicated softwares heavily streamline the animation workflow. Some people even use entirely web-based platforms to make their pixelart! the beauty of flipper pixelart is in the diversity of not only art style/visuals, but how those visuals were made. </p> <p>Key:</p> <p>\u2b50 Software I have used and recommend. \u2753 Software which I haven't used/haven't used enough to form an opinion, but you should consider them. \u274c Calling this software terrible is being nice.</p>"},{"location":"tutorials/asset_creation/asset_creation_guide/#non-web-based-software","title":"\u2023 Non Web-Based Software","text":"\u2b50 Aseprite <ul> <li>Heavily pixelart oriented. My personal favourite software.</li> <li>Absolute epitome of a streamlined user-friendly experience - easy frame/layer swapping, editing and exporting, wondrous tools and easy-to-learn keybinds.</li> <li>Open source - you can buy it on their site, on steam or build it yourself!</li> </ul> \u2b50 GIMP: Of Course I Included It. <ul> <li>GIMP is a free and open source software, regarded by many as \"free PhotoShop\".</li> <li>Although it's free and open source, it is great for pixel art due to it's arsenal of features and built-in animation player among other things. </li> </ul> \u2753 Adobe Photoshop: \"Like driving an F1 car to the grocery shop\" - Kuronons <ul> <li>Professional tool - much less user-friendly, and takes a lot of getting used to. </li> <li>Great for things such as resizing and editing frames, however lacks in animation integration compared to software like Aseprite; some manual aspects. </li> </ul> \u274c Microsoft Paint <ul> <li>Much less pixelart oriented</li> <li>Many manual aspects, such as changing between frames and terribly clunky keybinds meaning you'll move your mouse a lot.</li> <li>An alright free software for starting out, however you will definitely want more once you're acquainted with pixelart.</li> </ul>"},{"location":"tutorials/asset_creation/asset_creation_guide/#web-based-software","title":"\u2023 Web-Based Software","text":"\u2b50 EzGIF <ul> <li>EzGIF is a web-based art platform, but unlike Photopea, it is more for grabbing frames from <code>.gif</code> files. </li> <li>EzGIF is much better for grabbing the frames from a <code>.gif</code> and saving them to edit using one of the above softwares. It doesn't have an editor where you can change the physical pixels in each frame, however you can apply \"filters\" to whole GIFs. </li> <li>Personally, EzGIF is one of the softwares I first used to get the gist of animation. Before i starting Flipper animation, the only animation experience i had was stop-motion! </li> </ul> \u2b50 Piskel <ul> <li>Piskel is a free, open source web and offline plaform for creating animations and sprites that is surprisingly well catered for pixelart.</li> <li>It works similarly to Aseprite, but web-based (obviously...), and it includes many of aseprite's useful tools, with keybinds for each as well. </li> </ul> \u2753 Lopaka <ul> <li>Lopaka is another web-based art platform tailored for the Flipper among other devices. </li> <li>It includes many pre-made assets that are used in Flipper's firmware, and includes basic tools such as layers, among other things.</li> <li>Similar to Photopea, it's much better for small edits or creating menus since it lacks frame management. </li> </ul> \u2753 Photopea <ul> <li>Photopea is a web-based art platform similar to Photoshop. </li> <li>It's better for single frame editing, and catching those slight details. </li> </ul> <p>Note</p> <p>Web-based software can have more latency/less reliability compared to local software, and can lack in some features. However, the convenience/unique tools on web-based art softwares are exceptionally useful.  Local softwares are my personal preference, and are essentially the opposite of web-based software. </p>"},{"location":"tutorials/asset_creation/asset_creation_guide/#i-chose-a-software-what-now","title":"I Chose a Software, What Now?","text":""},{"location":"tutorials/asset_creation/asset_creation_guide/#learn","title":"\u2023 Learn!","text":"<p>Now you create, experiment, and learn! Obviously, YouTube has some wonderful tutorials from various channels. I also recommend looking at Pinterest for inspiration. Enjoy your learning experience! Pixelart is a huge journey. There's a plethora of pixelart techniques, so why not learn them all! Please note Aseprite has many tools for techniques such as dithering, making pixel perfect lines, and making basic shapes, which makes things a lot easier. </p>"},{"location":"tutorials/asset_creation/asset_creation_guide/#viewing-your-animation","title":"Viewing Your Animation","text":"<p>Ooggle's Flipper Animation Manager is the tool for previewing animations. It includes necessary features such as a GUI, a compilation tool, previews based on butthurt/level, and other useful features. </p> <p>Note</p> <p>Flipper Animations only take <code>.bm</code> files for animations, which are converted from 128x64px <code>.png</code> files. Flipper typically handles around 50-60 frames per animation and maximum of around 9fps before it crashes. </p>"},{"location":"tutorials/asset_creation/asset_creation_guide/#compiling-frames","title":"\u2023 Compiling Frames","text":"\u2b50 asset_packer.py <ul> <li>WillyJL's asset_packer.py is a great quick and easy tool for compiling asset packs. </li> <li>Easy to use, and compiles blisteringly fast. I highly reccommend this tool! </li> </ul> \u2b50 Flipper Animation Manager <ul> <li>Ooggle's FlipperAM has a great built in compiler, complete with a GUI. </li> <li>The perfect suite for viewing and compiling animations on the fly. Zero complaints. </li> </ul> \u2753 FBT <ul> <li>Flipper Build Tool is a solid tool with simple installation - just clone the OFW repo!</li> <li>a bit overkill if you just want to compile some animations, but you'll need it if you want to compile for OFW. </li> <li>Compile animations in one command with <code>./fbt icons proto dolphin_internal dolphin_ext resources</code>.</li> <li>TalkingSasquach has a great video on compiling with FBT. Follow it if you're compiling for the first time. </li> </ul> <p>Warning:  Use Only the Above Tools!</p> <p>Compilation tools other than the ones stated above seem to produce broken images as the final product, hence you shouldn't consider using them to compile. Don't overcomplicate it! </p>"},{"location":"tutorials/beginner_guide_fw/guide/","title":"Beginner's Guide to Building Firmware &amp; Flipper Zero Applications","text":"<p>This guide aims to introduce one to building and installing a release version of the firmware, as well as how to build one application from source using the Flipper Build Tool.</p>"},{"location":"tutorials/beginner_guide_fw/guide/#prerequisites","title":"Prerequisites","text":"<p>This guide assumes you have the following:</p> <ul> <li>Knowledge of how to navigate files and folders using <code>cd</code> in the command line</li> <li>A working install of Git</li> <li>About 2 gigabytes of free space</li> <li>Access to the Flipper Zero Firmware github page</li> </ul>"},{"location":"tutorials/beginner_guide_fw/guide/#building-your-first-firmware","title":"Building Your First Firmware","text":"<ol> <li>Create a folder on your PC where you will store the firmware<ul> <li>Ideally the path to this folder should have no spaces in the name to avoid any issues (I.E. <code>C:\\Users\\yourname\\Desktop\\myfirmware\\</code>)</li> </ul> </li> <li>Open up command prompt or powershell and <code>cd</code> into this directory</li> <li>Clone the firmware down to this folder using <code>git clone --recursive https://github.com/flipperdevices/flipperzero-firmware.git</code> (this will take a few minutes)</li> <li><code>cd</code> into the resulting <code>flipperzero-firmware</code> directory git created.</li> <li> <p>Once git has finished, we can now select a firmware version to check out. As of writing, 1.1.2 is the latest, so we can do <code>git checkout 1.1.2</code>. This will switch the code to the point 1.1.2 was released.</p> <p>Note: Should you need to see what list of version tags are available, you can do <code>git tag --list</code> and scroll to the bottom by holding the Page Down key.</p> <p>Note 2: DO NOT DOWNGRADE BELOW VERSION 1.1.2, as this can create issues with the alarm and battery meter.</p> </li> <li> <p>We are now prepared to build the firmware with the Flipper Build Tool that is included with the firmware.</p> </li> <li>To create a Flipper Zero firmware update package using the Flipper Build Tool, simply run <code>./fbt updater_package</code> and wait a few minutes. </li> <li>If all went well, the command should have finished without any errors. It should have also created a folder inside the <code>flipperzero-firmware</code> directory called <code>dist</code> and reported at the end that update files were placed in this folder. </li> <li>Navigate into the <code>flipperzero-firmware</code> directory and go to the <code>dist/f7-D/</code> folder. There are two items of interest in this folder, depending on which update method you want to do:<ul> <li><code>flipper-z-f7-update-local.tgz</code>: This is a compressed archive ready to be given to qFlipper to with the Install From File button, or via Flipper Lab by connecting and going to Settings -&gt; enable Third Party fw and then choosing INSTALL FROM FILE</li> <li><code>f7-update-local/</code>: This folder contains uncompressed update files ready to be used directly on your Flipper Zero. Simply copy this folder to your Flipper Zero under the <code>SD Card/Update/</code> folder. Then on your Flipper Zero, use the file browser and go inside the folder to run the <code>update</code> file within the <code>f7-update-local/</code> folder you copied over.</li> </ul> </li> </ol> <p>Congratulations! You have now built and installed your own firmware!</p> <p>Protips</p> <ul> <li>If you want a more streamlined way of updating your firmware changes, you can use <code>./fbt flash_usb_full</code> to build AND install the firmware to the device all in one go!</li> <li>To clear out build files and ensure you have a clean build directory if you make changes or want to switch versions, run <code>./fbt -c</code> to remove any old build files. Then build the firmware as normal.</li> <li>If you have no idea what you were doing and want to undo ALL changes made since the last commit as well as delete any random files not tracked by git, you can these commands in order: <code>git clean -dxf</code> &amp; <code>git reset --hard</code> </li> </ul>"},{"location":"tutorials/beginner_guide_fw/guide/#building-your-first-application","title":"Building Your First Application","text":"<p>This part of the guide assumes that you were able to complete the above steps for the firmware build successfully.</p> <p>Similar to building firmware, applications can be built using the Flipper Build Tool as well. Additionally, Flipper Zero applications must be built for the same firmware version your Flipper Zero has installed. </p> <p>To demonstrate building an application, we will use the Fortune Cookie app.</p> <ol> <li>In your <code>Flipperzero-firmware</code> directory, there should be a folder called <code>applications_user</code>, this is the folder we will be placing apps we want to build into. </li> <li><code>cd</code> into this directory.</li> <li>Run <code>git clone https://github.com/evillero/fortune_cookie.git</code> to copy down the fortune cookie app. You should now have a folder called <code>fortune_cookie</code> in your <code>applications_user</code> directory.</li> <li>Inside that folder, open up the <code>application.fam</code> file in your text editor of choice. Note the category name after <code>fap_category</code>, in this case <code>Games</code>. We will need this info for later. You may close your text editor out.</li> <li><code>cd</code> back to your <code>flipperzero-firmware</code> directory. </li> <li>Run <code>./fbt fap_dist</code> to build the code of all apps in the <code>applications_user</code> directory. </li> <li>Assuming fbt did not report any errors, the app should now be built<ul> <li>If you did hit errors, you'll need to contact the application author and ask them to fix it, or fix it yourself. As of v1.1.2 the Flipper Zero does not have a stable API, so applications can break with each update.  </li> </ul> </li> <li>Go in to the <code>dist/F7-D/</code> directory. You will notice a new <code>apps/</code> folder here. Go into this folder</li> <li>Remembering the <code>fap_category</code> value from the prior steps was <code>Games</code> from our notes earlier, we now know that we can go into the <code>Games</code> folder thats inside the <code>apps</code> folder.</li> <li>Here you will find <code>fortune_cookie.fap</code> as well as any other items categorized as games. These are ready to use.</li> <li>Open up qFlipper or Flipper lab, and copy <code>fortune_cookie.fap</code> into <code>SD Card/apps/Games</code>, creating the <code>Games</code> folder if you do not have one. </li> <li>On your Flipper Zero, go to Apps -&gt; Games, and your Fortune cookie app should be there. Simply click it and run it!</li> </ol> <p>Protip</p> <p>If you grab the <code>appid</code> from the <code>application.fam</code> file, you can build, upload, and launch this app to the Flipper Zero all in one step! Simply do <code>./fbt launch APPSRC=fortune_cookie</code></p>"},{"location":"tutorials/f0_fonts_guide/guide/","title":"How to create custom fonts for the Flipper Zero","text":"<p>Guide credited to EntranceJew</p> <p>\"I spent two days trying to do this mess so you're going to learn something.\"</p> <p>This guide aims to show how a custom font can be created for the Flipper Zero, with Microsoft Windows as the OS used.</p>"},{"location":"tutorials/f0_fonts_guide/guide/#pixelfont","title":"Pixelfont","text":"<p>Download and open pixelfont in your browser </p> <p>Before you import your image, really study how this is laid out, the default example is really helpful on how you should plan to draw your own font.</p>"},{"location":"tutorials/f0_fonts_guide/guide/#aesprite-your-font","title":"Aesprite your font","text":"<p>This part is painful.</p> <ol> <li>Find find your largest character, make sure each letter of your font is on a grid with an equal amount of room as that one.</li> <li>If you have a baseline, be sure to account for that with your tile size in regards to how each character is positioned within the tile.</li> <li>You can work with layers or tags but most auto-tools are going to expect a long \"tile sheet\" where each character is visible in rows/columns of equal size.</li> <li>Make sure to set up your grid to help you out:</li> </ol> <p></p>"},{"location":"tutorials/f0_fonts_guide/guide/#back-to-pixelfont","title":"Back to pixelfont","text":"<ol> <li>Pick an image (your export from aesprite)</li> <li>Type out the glyphs in the image in the order they appear<ul> <li>NOTE: save this somewhere, we're going to want to have this later!</li> </ul> </li> <li>Set the <code>tile width</code> / <code>tile height</code> to match the largest character</li> <li>Adjust the baseline to be <code>the height of your pixel font</code> as your starting point:<ol> <li>If all your characters are equally tall (reach the top and bottom) then you don't need to do anything</li> <li>If you have characters that are like a lowercase \"y\" which is 2 pixels lower than every other character / the only one that touches the bottom of its tile, then make this box equal to the height of a tile minus the distance between a regular letter's bottom (like <code>h</code>) to the tile's bottom. </li> <li>If your font was 5 pixels tall, but your y goes 2 pixels lower than every other character, then you'd type 3 here</li> </ol> </li> <li>If you set up kerning pairs then you probably don't want to click <code>Monospace</code> </li> <li>If there is a reason to change anything on the output page, I do not know it.</li> <li>Fill out your Meta page, then hit <code>Save TTF</code></li> </ol>"},{"location":"tutorials/f0_fonts_guide/guide/#fontforge-cleanup","title":"FontForge cleanup","text":"<p>This part was mostly cited from https://github.com/projectitis/packedbdf/blob/master/README.md verbatim but I had to change a few parts in order to make it accurate for me, on windows, trying to make fonts for the Flipper Zero.</p> <ol> <li>Download and install Font Forge</li> <li>Launch Font Forge and open the font file (ttf tends to keep kerning pairs better?)</li> <li>Edit &gt; Select &gt; Glyphs Worth Outputting <ol> <li>You can do Element &gt; Overlap &gt; Remove Overlap at this stage to simplify the geometry of your pixel font.</li> <li>Other Validation steps may impact your font if you set up kerning pairs in the pixelfont tool, it relies on boundaries being set up a specific way with the font so fixing \"declared widths\" may cause more problems for you.</li> </ol> </li> </ol> <p>It is recommended you remove Glyphs you have no concern with, you can do this via the following:</p> <ol> <li>Edit &gt; Select &gt; Invert the selection (to select the glyphs you don't want to keep), and</li> <li>Encoding &gt; Detach and remove Glyphs to remove them from the font<ul> <li>This might not work if you have something invalid in your selection, like something you can't remove.</li> </ul> </li> <li>You can check what is still inside your font if you select Encoding &gt; Compact to reduce the character set, but I recommend turning it back off prior to generating fonts.</li> </ol> <p>The next few steps will generate the bitmaps/pixel versions of each glyph in the sizes that you need:</p> <ol> <li>Element &gt; Bitmap strikes available launches the dialog to generate the bitmap versions<ol> <li>Select <code>Win</code>,</li> <li>Type in the pixel height of a single character of your font in the <code>Point sizes on a 120 dpi screen</code> <ul> <li>e.g. <code>5</code> will automatically populate into =&gt; <code>Pixel Sizes: 8</code></li> </ul> </li> </ol> </li> <li>Click [OK] to generate the bitmap strikes of each glyph in various sizes</li> <li>Finally, select File &gt; Generate Fonts<ul> <li>Select \"No outline font\" (for Outline font) and \"BDF\" (for Bitmap font), then hit [Generate].</li> <li>Enter 120dpi as the screen resolution (also see step 7). This ensures that the font sizes are correct inside the files.</li> </ul> </li> <li>A BDF file with the pixel size will be generated.</li> <li>I recommend you save your current project as a <code>sfdir</code> in case you need to tweak it later.</li> </ol>"},{"location":"tutorials/f0_fonts_guide/guide/#u8g2-unifont-helper","title":"u8g2 Unifont Helper","text":"<ol> <li>Visit u8g2 Unifont helper</li> <li>Paste your glyph string from earlier in pixelfont into the <code>Individual characters</code> section<ul> <li>If you don't have it anywhere, open up the TTF in FontForge and without the encoding collapsed, take note of the number of the glyphs that you have in your font    </li> </ul> </li> <li>Change the input filename to whatever FontForge saved, e.g. <code>DootieMicroStats-8.bdf</code></li> <li>Run the command line (install the bdfconv linked at the top if you don't have a copy)<ul> <li>You will probably need to prefix most things with a path otherwise the source file will output next to <code>bdfconv.exe</code></li> </ul> </li> <li>Verify that the rendered TGA matches the tile height of your font from the earlier steps </li> </ol>"},{"location":"tutorials/f0_fonts_guide/guide/#clean-the-output","title":"Clean the output","text":"<p>bdfconv exports some extra junk you don't need.  You can get rid of the <code>U8G2_FONT_SECTION</code> stuff highlighted above.</p> <p>I also got rid of the absolute array length because I was dialing in a lot of tests trying to find 1:1 pixel ratio</p>"},{"location":"tutorials/f0_fonts_guide/guide/#test-it-out","title":"Test it out","text":"<p>the default example_custom_font Flipper Zero provides in an example is a good spot to transplant the results from <code>YourFontName.c</code> to demo things. </p> <p>Looks like all my kerning test samples worked.</p>"},{"location":"tutorials/how2anim/how2anim/","title":"Installing Custom Animations","text":"<p>In this guide, you will learn how to add new animations to Flipper Zero.</p>"},{"location":"tutorials/how2anim/how2anim/#1-getting-the-files","title":"1. Getting the Files","text":"<p>First, you need to download the animations to your local computer. Usually, they can be found on GitHub.  For our example, we will take Wr3nch's Flip0Anims repository.</p> <p>In the repo, simply click on the green \"Code\" button and select \"Download ZIP\":</p> <p></p> <p>More Flipper Zero Animation repos from other creators:</p> <ul> <li>Kuronons</li> <li>Topbillin</li> <li>LinusKay</li> <li>Evillero</li> </ul>"},{"location":"tutorials/how2anim/how2anim/#2-prepare-your-animation-folders","title":"2. Prepare Your Animation Folders","text":"<p>In this example, we will prepare the <code>X_X_FLIPCLAP</code> and <code>X_X_FLIPPATTERN</code> animations from the downloaded repo:</p> <p> </p> <p>After the download has finished, extract the <code>flip0anims-main.zip</code> file. You will only need the folders of the animations you want to use. Find the <code>X_X_FLIPCLAP</code> and <code>X_X_FLIPPATTERN</code> folders in: <code>flip0anims-main &gt; Animations &gt; Flipper</code>.</p> <p></p> <p>Note</p> <p>Make sure each animation folder contains:</p> <ul> <li>The animation frames, numbered in order: <code>frame_0.bm</code>, <code>frame_1.bm</code>, and so on</li> <li>A <code>meta.txt</code> file</li> </ul>"},{"location":"tutorials/how2anim/how2anim/#3-copy-the-folders-to-your-sd-card","title":"3. Copy the Folders to Your SD Card","text":"<p>Copy the animation folders into the following directory on your Flipper's SD card via qFlipper:</p> <p><pre><code>/SD Card/dolphin/\n</code></pre> </p>"},{"location":"tutorials/how2anim/how2anim/#4-getting-the-manifesttxt-file","title":"4. Getting the <code>manifest.txt</code> File","text":"<p>In qFlipper, right click the <code>manifest.txt</code> file and select the Download option. Save it to your computer so that you can edit it.</p> <p></p> <p>The contents of your <code>manifest.txt</code> file should look like this: <pre><code>Filetype: Flipper Animation Manifest\nVersion: 1\n\nName: L1_Waves_128x50\nMin butthurt: 0\nMax butthurt: 5\nMin level: 1\nMax level: 3\nWeight: 3\n\nName: L1_Laptop_128x51\nMin butthurt: 0\nMax butthurt: 7\nMin level: 1\nMax level: 1\nWeight: 3\n\n/* ...info on other animations continues... */\n</code></pre></p> <p>Note</p> <p>You can always re-download the latest version of the <code>manifest.txt</code> file from the firmware repository: https://github.com/flipperdevices/flipperzero-firmware/blob/dev/assets/dolphin/external/manifest.txt</p>"},{"location":"tutorials/how2anim/how2anim/#5-add-new-animation-entries","title":"5. Add New Animation Entries","text":"<p>For each new animation, add the following block to your <code>manifest.txt</code>:</p> <pre><code>Name: REPLACEME\nMin butthurt: 0\nMax butthurt: 14\nMin level: 1\nMax level: 3\nWeight: 3\n</code></pre> <p>Replace <code>REPLACEME</code> with the exact name of your animation folder.</p> <p>Note</p> <p>Blocks can be added anywhere in the manifest, as long as they are separated by an empty line. For convenience, we recommend grouping them together at the start or end of the file.</p> <p>In our example, we add 2x of those code snippets to the start of our file, and then change the two <code>REPLACEME</code>'s to <code>X_X_FLIPCLAP</code> and <code>X_X_F0Pattern</code> so it looks like this: <pre><code>Filetype: Flipper Animation Manifest\nVersion: 1\n\nName: X_X_FLIPCLAP\nMin butthurt: 0\nMax butthurt: 14\nMin level: 1\nMax level: 3\nWeight: 3\n\nName: X_X_F0Pattern\nMin butthurt: 0\nMax butthurt: 14\nMin level: 1\nMax level: 3\nWeight: 3\n\nName: L1_Waves_128x50\n/* ...info on other animations continues... */\n</code></pre></p> <p>Tip</p> <p>To test only your new animations, remove all other entries. Make sure to back up the <code>manifest.txt</code> file first!</p>"},{"location":"tutorials/how2anim/how2anim/#6-apply-changes-and-upload-the-file-to-flipper","title":"6. Apply Changes and Upload the File to Flipper","text":"<p>Save your changes to the <code>manifest.txt</code> file, and upload it to the <code>/SD Card/dolphin/</code> folder on your Flipper Zero.</p>"},{"location":"tutorials/how2anim/how2anim/#7-reboot-your-flipper","title":"7. Reboot Your Flipper","text":"<p>Restart your Flipper. Your new animation should now appear!</p> <p></p> <p>Note</p> <p>On each boot, a random animation will be chosen. You can not select manually which animation will play.</p>"},{"location":"tutorials/how2anim/how2anim/#dont-lose-your-updates","title":"Don't Lose Your Updates","text":"<p>The <code>manifest.txt</code> on your SD card gets replaced with each firmware update. Make sure to back it up before you install the latest version.</p>"}]}